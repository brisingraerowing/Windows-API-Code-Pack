<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinCopies.WindowsAPICodePack.Win32Native</name>
    </assembly>
    <members>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.CoreHelpersRunningOn10">
            <summary>
              Looks up a localized string similar to Only supported on Windows 8 or newer..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.CoreHelpersRunningOn7">
            <summary>
              Looks up a localized string similar to Only supported on Windows 7 or newer..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.CoreHelpersRunningOn8">
            <summary>
              Looks up a localized string similar to Only supported on Windows 8 or newer..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.CoreHelpersRunningOn8_1">
            <summary>
              Looks up a localized string similar to Only supported on Windows 8.1 or newer..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.CoreHelpersRunningOnVista">
            <summary>
              Looks up a localized string similar to Only supported on Windows Vista or newer..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.CoreHelpersRunningOnXp">
            <summary>
              Looks up a localized string similar to Only supported on Windows XP or newer..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.PropertyKeyFormatString">
            <summary>
              Looks up a localized string similar to {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.PropVariantMultiDimArray">
            <summary>
              Looks up a localized string similar to Multi-dimensional SafeArrays not supported..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.PropVariantNullString">
            <summary>
              Looks up a localized string similar to String argument cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.PropVariantTypeNotSupported">
            <summary>
              Looks up a localized string similar to This Value type is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.PropVariantUnsupportedType">
            <summary>
              Looks up a localized string similar to Cannot be cast to unsupported type..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.TaskDialogDefaultCaption">
            <summary>
              Looks up a localized string similar to Application.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.TaskDialogDefaultContent">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Resources.LocalizedMessages.TaskDialogDefaultMainInstruction">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FilePathNotExist">
            <summary>
              Looks up a localized string similar to The given path does not exist ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderIdsUnknownGuid">
            <summary>
              Looks up a localized string similar to Guid does not identify a known folder..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeCategory">
            <summary>
              Looks up a localized string similar to ControlPanel Category.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeClassic">
            <summary>
              Looks up a localized string similar to ControlPanel Classic.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeCommunications">
            <summary>
              Looks up a localized string similar to Communications.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeCompressedFolder">
            <summary>
              Looks up a localized string similar to Compressed Folder.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeContacts">
            <summary>
              Looks up a localized string similar to Contacts.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeDocuments">
            <summary>
              Looks up a localized string similar to Documents.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeGames">
            <summary>
              Looks up a localized string similar to Games.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeGenericLibrary">
            <summary>
              Looks up a localized string similar to Generic Library.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeInvalid">
            <summary>
              Looks up a localized string similar to Invalid.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeLibrary">
            <summary>
              Looks up a localized string similar to Library.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeMusic">
            <summary>
              Looks up a localized string similar to Music.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeMusicIcons">
            <summary>
              Looks up a localized string similar to Music Icons.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeNetworkExplorer">
            <summary>
              Looks up a localized string similar to Network Explorer.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeNotSpecified">
            <summary>
              Looks up a localized string similar to Not Specified.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeOpenSearch">
            <summary>
              Looks up a localized string similar to Open Search.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeOtherUsers">
            <summary>
              Looks up a localized string similar to Other Users.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypePictures">
            <summary>
              Looks up a localized string similar to Pictures.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypePrinters">
            <summary>
              Looks up a localized string similar to Printers.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeRecordedTV">
            <summary>
              Looks up a localized string similar to RecordedTV.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeRecycleBin">
            <summary>
              Looks up a localized string similar to RecycleBin.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeSavedGames">
            <summary>
              Looks up a localized string similar to Saved Games.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeSearchConnector">
            <summary>
              Looks up a localized string similar to Search Connector.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeSearches">
            <summary>
              Looks up a localized string similar to Searches.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeSearchResults">
            <summary>
              Looks up a localized string similar to Generic SearchResults.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeSoftwareExplorer">
            <summary>
              Looks up a localized string similar to Software Explorer.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeUserFiles">
            <summary>
              Looks up a localized string similar to User Files.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeUserLibraries">
            <summary>
              Looks up a localized string similar to Users Libraries.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.FolderTypeVideos">
            <summary>
              Looks up a localized string similar to Videos.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.KnownFolderInvalidGuid">
            <summary>
              Looks up a localized string similar to Given Known Folder ID is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.KnownFolderParsingName">
            <summary>
              Looks up a localized string similar to Parsing name is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.PropertyCollectionCanonicalInvalidIndex">
            <summary>
              Looks up a localized string similar to This CanonicalName is not a valid index..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.PropertyCollectionInvalidIndex">
            <summary>
              Looks up a localized string similar to This PropertyKey is not a valid index..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.PropertyCollectionNullCanonicalName">
            <summary>
              Looks up a localized string similar to Argument CanonicalName cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.SearchConditionFactoryInvalidProperty">
            <summary>
              Looks up a localized string similar to Given property key is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellExceptionDefaultText">
            <summary>
              Looks up a localized string similar to Shell Exception has occurred, look at inner exception for information..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellHelperGetParsingNameFailed">
            <summary>
              Looks up a localized string similar to GetParsingName has failed..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellInvalidCanonicalName">
            <summary>
              Looks up a localized string similar to The given CanonicalName is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellLibraryDefaultSaveFolderNotFound">
            <summary>
              Looks up a localized string similar to DefaultSaveFolder path not found..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellLibraryEmptyName">
            <summary>
              Looks up a localized string similar to LibraryName cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellLibraryFolderNotFound">
            <summary>
              Looks up a localized string similar to Folder path not found..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellLibraryInvalidFolderType">
            <summary>
              Looks up a localized string similar to Invalid FolderType Guid..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellLibraryInvalidLibrary">
            <summary>
              Looks up a localized string similar to The given known folder is not a valid library..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellObjectCannotGetDisplayName">
            <summary>
              Looks up a localized string similar to Can&apos;t get the display name..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellObjectCreationFailed">
            <summary>
              Looks up a localized string similar to Shell item could not be created..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellObjectFactoryPlatformNotSupported">
            <summary>
              Looks up a localized string similar to Shell Object creation requires Windows Vista or higher operating system..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellObjectFactoryUnableToCreateItem">
            <summary>
              Looks up a localized string similar to Unable to Create Shell Item..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertyCannotSetProperty">
            <summary>
              Looks up a localized string similar to The value on this property cannot be set. To set the property value, use the ShellObject that is associated with this property..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertyFactoryConstructorNotFound">
            <summary>
              Looks up a localized string similar to No constructor found matching requested argument types..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertySetValue">
            <summary>
              Looks up a localized string similar to Unable to set property..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertyUnableToGetWritableProperty">
            <summary>
              Looks up a localized string similar to Unable to get writable property store for this property..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertyValueTruncated">
            <summary>
              Looks up a localized string similar to A value had to be truncated in a string or rounded if a numeric value. Set AllowTruncatedValue to true to prevent this exception..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertyWindows7">
            <summary>
              Looks up a localized string similar to This Property is available on Windows 7 only..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellPropertyWrongType">
            <summary>
              Looks up a localized string similar to This property only accepts a value of type \&quot;{0}\&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellSearchFolderUnableToSetSortColumns">
            <summary>
              Looks up a localized string similar to Unable to set list of sort columns..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellSearchFolderUnableToSetVisibleColumns">
            <summary>
              Looks up a localized string similar to Unable to set visible columns..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellThumbnailCurrentSizeRange">
            <summary>
              Looks up a localized string similar to CurrentSize (width or height) cannot be greater than the maximum size: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellThumbnailDoesNotHaveThumbnail">
            <summary>
              Looks up a localized string similar to The current ShellObject does not have a thumbnail. Try using ShellThumbnailFormatOption.Default to get the icon for this item..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellThumbnailNoHandler">
            <summary>
              Looks up a localized string similar to The current ShellObject does not have a valid thumbnail handler or there was a problem in extracting the thumbnail for this specific shell object..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Resources.LocalizedMessages.ShellThumbnailSizeCannotBe0">
            <summary>
              Looks up a localized string similar to CurrentSize (width or height) cannot be 0..
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellImageListIconSize.Large">
            <summary>
            The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the Appearance tab in Display Properties, the image is 48x48 pixels.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellImageListIconSize.Small">
            <summary>
            These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellImageListIconSize.ExtraLarge">
            <summary>
            These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellImageListIconSize.SysSmall">
            <summary>
            These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellImageListIconSize.Jumbo">
            <summary>
            Windows Vista and later. The image is normally 256x256 pixels.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellImageListIconSize.Last">
            <summary>
            The largest valid flag value, for validation purposes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Message">
            <summary>
            The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.uCallbackMessage"/> member is valid.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Icon">
            <summary>
            The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.hIcon"/> member is valid.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Tip">
            <summary>
            The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.szTip"/> member is valid.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.State">
            <summary>
            The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.dwState"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.dwStateMask"/> members are valid.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Info">
            <summary>
            <para>Display a balloon notification. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.szInfo"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.szInfoTitle"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.dwInfoFlags"/>, and <see cref="!:NotifyIconData.uTimeout"/> members are valid. Note that <see cref="!:NotifyIconData.uTimeout"/> is valid only in Windows 2000 and Windows XP.</para>
            <para>To display the balloon notification, specify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Info"/> and provide text in <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.szInfo"/>.</para>
            <para>To remove a balloon notification, specify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Info"/> and provide an empty string through <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.szInfo"/>.</para>
            <para>To add a notification area icon without displaying a notification, do not set the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Info"/> flag.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Guid">
            <summary>
            <para>Windows 7 and later: The guidItem is valid.</para>
            <para>Windows Vista and earlier: Reserved.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.RealTime">
            <summary>
            Windows Vista and later. If the balloon notification cannot be displayed immediately, discard it. Use this flag for notifications that represent real-time information which would be meaningless or misleading if displayed at a later time. For example, a message that states "Your telephone is ringing." <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.RealTime"/> is meaningful only when combined with the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.Info"/> flag.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.ShowTip">
            <summary>
            Windows Vista and later. Use the standard tooltip. Normally, when <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.uVersion"/> is set to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconVersion.Version4"/>, the standard tooltip is suppressed and can be replaced by the application-drawn, pop-up UI. If the application wants to show the standard tooltip with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconVersion.Version4"/>, it can specify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconFlags.ShowTip"/> to indicate the standard tooltip should still be shown.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconStates.Hidden">
            <summary>
            The icon is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconStates.SharedIcon">
            <summary>
            The icon resource is shared between multiple icons.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Add">
            <summary>
            Adds an icon to the status area. The icon is given an identifier in the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData"/> structure pointed to by lpdata—either through its uID or guidItem member. This identifier is used in subsequent calls to <see cref="!:InteropTools.Shell_NotifyIconW(NotifyIconModification, PNOTIFYICONDATAW)"/> to perform later actions on the icon.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Modify">
            <summary>
            Modifies an icon in the status area. <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData"/> structure pointed to by lpdata uses the ID originally assigned to the icon when it was added to the notification area (<see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Add"/>) to identify the icon to be modified.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Delete">
            <summary>
            Deletes an icon from the status area. <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData"/> structure pointed to by lpdata uses the ID originally assigned to the icon when it was added to the notification area (<see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Add"/>) to identify the icon to be deleted.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.SetFocus">
            <summary>
            Shell32.dll version 5.0 and later only. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.SetFocus"/> to return focus to the notification area.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.SetVersion">
            <summary>
            <para>Shell32.dll version 5.0 and later only. Instructs the notification area to behave according to the version number specified in the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconData.uVersion"/> member of the structure pointed to by lpdata. The version number specifies which members are recognized.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.SetVersion"/> must be called every time a notification area icon is added (<see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Add"/>)>. It does not need to be called with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.NotifyIconModification.Modify"/>. The version setting is not persisted once a user logs off.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.EmptyRecycleBinFlags.NoConfirmation">
            <summary>
            No dialog box confirming the deletion of the objects will be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.EmptyRecycleBinFlags.NoProgressUI">
            <summary>
            No dialog box indicating the progress will be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.EmptyRecycleBinFlags.NoSound">
            <summary>
            No sound will be played when the operation is complete.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions">
            <summary>
            Indicate flags that modify the property store object retrieved by methods 
            that create a property store, such as IShellItem2::GetPropertyStore or 
            IPropertyStoreFactory::GetPropertyStore.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.Default">
            <summary>
            Meaning to a calling process: Return a read-only property store that contains all 
            properties. Slow items (offline files) are not opened. 
            Combination with other flags: Can be overridden by other flags.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.HandlePropertiesOnly">
            <summary>
            Meaning to a calling process: Include only properties directly from the property
            handler, which opens the file on the disk, network, or device. Meaning to a file 
            folder: Only include properties directly from the handler.
            
            Meaning to other folders: When delegating to a file folder, pass this flag on 
            to the file folder; do not do any multiplexing (MUX). When not delegating to a 
            file folder, ignore this flag instead of returning a failure code.
            
            Combination with other flags: Cannot be combined with GPS_TEMPORARY, 
            GPS_FASTPROPERTIESONLY, or GPS_BESTEFFORT.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.ReadWrite">
            <summary>
            Meaning to a calling process: Can write properties to the item. 
            Note: The store may contain fewer properties than a read-only store. 
            
            Meaning to a file folder: ReadWrite.
            
            Meaning to other folders: ReadWrite. Note: When using default MUX, 
            return a single unmultiplexed store because the default MUX does not support ReadWrite.
            
            Combination with other flags: Cannot be combined with GPS_TEMPORARY, GPS_FASTPROPERTIESONLY, 
            GPS_BESTEFFORT, or GPS_DELAYCREATION. Implies GPS_HANDLERPROPERTIESONLY.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.Temporary">
            <summary>
            Meaning to a calling process: Provides a writable store, with no initial properties, 
            that exists for the lifetime of the Shell item instance; basically, a property bag 
            attached to the item instance. 
            
            Meaning to a file folder: Not applicable. Handled by the Shell item.
            
            Meaning to other folders: Not applicable. Handled by the Shell item.
            
            Combination with other flags: Cannot be combined with any other flag. Implies GPS_READWRITE
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.FastPropertiesOnly">
            <summary>
            Meaning to a calling process: Provides a store that does not involve reading from the 
            disk or network. Note: Some values may be different, or missing, compared to a store 
            without this flag. 
            
            Meaning to a file folder: Include the "innate" and "fallback" stores only. Do not load the handler.
            
            Meaning to other folders: Include only properties that are available in memory or can 
            be computed very quickly (no properties from disk, network, or peripheral IO devices). 
            This is normally only data sources from the IDLIST. When delegating to other folders, pass this flag on to them.
            
            Combination with other flags: Cannot be combined with GPS_TEMPORARY, GPS_READWRITE, 
            GPS_HANDLERPROPERTIESONLY, or GPS_DELAYCREATION.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.OpensLowItem">
            <summary>
            Meaning to a calling process: Open a slow item (offline file) if necessary. 
            Meaning to a file folder: Retrieve a file from offline storage, if necessary. 
            Note: Without this flag, the handler is not created for offline files.
            
            Meaning to other folders: Do not return any properties that are very slow.
            
            Combination with other flags: Cannot be combined with GPS_TEMPORARY or GPS_FASTPROPERTIESONLY.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.DelayCreation">
            <summary>
            Meaning to a calling process: Delay memory-intensive operations, such as file access, until 
            a property is requested that requires such access. 
            
            Meaning to a file folder: Do not create the handler until needed; for example, either 
            GetCount/GetAt or GetValue, where the innate store does not satisfy the request. 
            Note: GetValue might fail due to file access problems.
            
            Meaning to other folders: If the folder has memory-intensive properties, such as 
            delegating to a file folder or network access, it can optimize performance by 
            supporting IDelayedPropertyStoreFactory and splitting up its properties into a 
            fast and a slow store. It can then use delayed MUX to recombine them.
            
            Combination with other flags: Cannot be combined with GPS_TEMPORARY or 
            GPS_READWRITE
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.BestEffort">
            <summary>
            Meaning to a calling process: Succeed at getting the store, even if some 
            properties are not returned. Note: Some values may be different, or missing,
            compared to a store without this flag. 
            
            Meaning to a file folder: Succeed and return a store, even if the handler or 
            innate store has an error during creation. Only fail if substores fail.
            
            Meaning to other folders: Succeed on getting the store, even if some properties 
            are not returned.
            
            Combination with other flags: Cannot be combined with GPS_TEMPORARY, 
            GPS_READWRITE, or GPS_HANDLERPROPERTIESONLY.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetPropertyStoreOptions.MaskValid">
            <summary>
            Mask for valid GETPROPERTYSTOREFLAGS values.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes">
            <summary>
            Provides attributes for files and directories.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.ReadOnly">
            <summary>
            The file is read-only. <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.ReadOnly"/> is supported on Windows, Linux, and macOS. On Linux and macOS, changing the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.ReadOnly"/> flag is a permissions operation.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing. <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Hidden"/> is supported on Windows, Linux, and macOS.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.System">
            <summary>
            The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Directory">
            <summary>
            The file is a directory. <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Directory"/> is supported on Windows, Linux, and macOS.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Archive">
            <summary>
            This file is marked to be included in incremental backup operation. Windows sets this attribute whenever the file is modified, and backup software should clear it when processing the file during incremental backup.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Device">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Normal">
            <summary>
            The file is a standard file that has no special attributes. This attribute is valid only if it is used alone. <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Normal"/> is supported on Windows, Linux, and macOS.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Temporary">
            <summary>
            The file is temporary. A temporary file contains data that is needed while an application is executing but is not needed after the application is finished. File systems try to keep all the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.SparseFile">
            <summary>
            The file is a sparse file. Sparse files are typically large files whose data consists of mostly zeros.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.ReparsePoint">
            <summary>
            The file contains a reparse point, which is a block of user-defined data associated with a file or a directory. <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.ReparsePoint"/> is supported on Windows, Linux, and macOS.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Compressed">
            <summary>
            The file is compressed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Offline">
            <summary>
            The file is offline. The data of the file is not immediately available.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.NotContentIndexed">
            <summary>
            The file will not be indexed by the operating system's content indexing service.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Encrypted">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.IntegrityStream">
            <summary>
            The file or directory includes data integrity support. When this value is applied to a file, all data streams in the file have integrity support. When this value is applied to a directory, all new files and subdirectories within that directory, by default, include integrity support.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Virtual">
            <summary>
            This value is reserved for system use.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.NoScrubData">
            <summary>
            The file or directory is excluded from the data integrity scan. When this value is applied to a directory, by default, all new files and subdirectories within that directory are excluded from data integrity.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.RecallOnOpen">
            <summary>
            This attribute only appears in directory enumeration classes (FILE_DIRECTORY_INFORMATION, FILE_BOTH_DIR_INFORMATION, etc.). When this attribute is set, it means that the file or directory has no physical representation on the local system; the item is virtual. Opening the item will be more expensive than normal, e.g. it will cause at least some of it to be fetched from a remote store.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.EA">
            <summary>
            Same as <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.RecallOnOpen"/>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.RecallOnDataAccess">
            <summary>
            When this attribute is set, it means that the file or directory is not fully present locally. For a file that means that not all of its data is on local storage (e.g. it may be sparse with some data still in remote storage). For a directory it means that some of the directory contents are being virtualized from another location. Reading the file / enumerating the directory will be more expensive than normal, e.g. it will cause at least some of the file/directory content to be fetched from a remote store. Only kernel-mode callers can set this bit.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags">
            <summary>
            Flags that specify how the file is to be copied.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags.FailIfExists">
            <summary>
            The copy operation fails immediately if the target file already exists.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags.Restartable">
            <summary>
            Progress of the copy is tracked in the target file in case the copy fails. The failed copy can be restarted at a later time by specifying the same values for lpExistingFileName and lpNewFileName as those used in the call that failed. This can significantly slow down the copy operation as the new file may be flushed multiple times during the copy operation.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags.OpenSourceForWrite">
            <summary>
            The file is copied and the original file is opened for write access.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags.AllowDecryptedDestination">
            <summary>
            An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags.CopySymLink">
             <summary>
             If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to.
            
             Windows Server 2003 and Windows XP:  This value is not supported.
             </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags.NoBuffering">
             <summary>
             The copy operation is performed using unbuffered I/O, bypassing system I/O cache resources. Recommended for very large file transfers.
            
             Windows Server 2003 and Windows XP:  This value is not supported.
             </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags">
            <summary>
            Flags that specify how the file is to be moved.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.ReplaceExisting">
            <summary>
            <para>If a file named lpNewFileName exists, the function replaces its contents with the contents of the lpExistingFileName file.</para>
            <para>This value cannot be used if lpNewFileName or lpExistingFileName names a directory.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.CopyAllowed">
            <summary>
            <para>If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.</para>
            <para>If the file is successfully copied to a different volume and the original file is unable to be deleted, the function succeeds leaving the source file intact.</para>
            <para>This value cannot be used with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.DelayUntilReboot"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.DelayUntilReboot">
            <summary>
            <para>The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed, but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.</para>
            <para>This value can only be used if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.
            <para>This value cannot be used with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.CopyAllowed"/>.</para></para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.WriteThrough">
            <summary>
            <para>The function does not return until the file has actually been moved on the disk.</para>
            <para>Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. The flush occurs at the end of the copy operation.</para>
            <para>This value has no effect if <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.DelayUntilReboot"/> is set.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.CreateHardLink">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.FailIfNotTrackable">
            <summary>
            The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressCallbackReason">
            <summary>
            The reason that <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine"/> was called.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressCallbackReason.ChunkFinished">
            <summary>
            Another part of the data file was copied.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressCallbackReason.StreamSwitch">
            <summary>
            Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult">
            <summary>
            The result that is returned by the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine"/> function.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult.Continue">
            <summary>
            Continue the copy operation.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult.Cancel">
            <summary>
            Cancel the copy operation and delete the destination file.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult.Stop">
            <summary>
            Stop the copy operation. It can be restarted at a later time.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult.Quiet">
            <summary>
            Continue the copy operation, but stop invoking CopyProgressRoutine to report progress.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.AddOverlays">
            <summary>
            Apply the appropriate overlays to the file's icon. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> flag must also be set. <b>Windows ME or higher.</b>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.AttributesSpecified">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Attributes"/> to indicate that the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.dwAttributes"/> member of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO"/> structure at <b>psfi</b> contains the specific attributes that are desired. These attributes are passed to <see cref="!:IShellFolder.GetAttributesOf"/>. If this flag is not specified, 0xFFFFFFFF is passed to <see cref="!:IShellFolder.GetAttributesOf"/>, requesting all attributes. This flag cannot be specified with the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> flag.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Attributes">
            <summary>
            Retrieve the item attributes. The attributes are copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.dwAttributes"/> member of the structure specified in the <b>psfi</b> parameter. These are the same attributes that are obtained from <see cref="!:IShellFolder.GetAttributesOf"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.DisplayName">
            <summary>
            Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.szDisplayName"/> member of the structure specified in <b>psfi</b>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.ExeType">
            <summary>
            Retrieve the type of the executable file if <b>pszPath</b> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.hIcon"/> member of the structure specified by <b>psfi</b>, and the index is copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.iIcon"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.IconLocation">
            <summary>
            Retrieve the name of the file that contains the icon representing the file specified by <b>pszPath</b>, as returned by the <see cref="!:IExtractIcon.GetIconLocation"/> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.szDisplayName"/> member of the structure specified by <b>psfi</b>. The icon's index is copied to that structure's <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.iIcon"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.LargeIcon">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/>, causing the function to retrieve the file's large icon. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.LinkOverlay">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/>, causing the function to add the link overlay to the file's icon. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.OpenIcon">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/>, causing the function to retrieve the file's open icon. Also used to modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SysIconIndex"/>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> and/or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SysIconIndex"/> flag must also be set.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.OverlayIndex">
            <summary>
            Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.iIcon"/> member of the structure specified by <b>psfi</b>. This flag requires that the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> be set as well. <b>Windows ME or higher.</b>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.PIDL">
            <summary>
            Indicate that <b>pszPath</b> is the address of an <see cref="!:ITEMIDLIST"/> structure rather than a path name.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Selected">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/>, causing the function to blend the file's icon with the system highlight color. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.ShelliconSize">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SmallIcon">
            <summary>
            Modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/>, causing the function to retrieve the file's small icon. Also used to modify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SysIconIndex"/>, causing the function to return the handle to the system image list that contains small icon images. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Icon"/> and/or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SysIconIndex"/> flag must also be set.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SysIconIndex">
            <summary>
            Retrieve the index of a system image list icon. If successful, the index is copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.iIcon"/> member of <b>psfi</b>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to iIcon are valid. Attempting to access other images in the system image list will result in undefined behavior.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.TypeName">
            <summary>
            Retrieve the string that describes the file's type. The string is copied to the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.szTypeName"/> member of the structure specified in <b>psfi</b>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.UseFileAttributes">
            <summary>
            Indicates that the function should not attempt to access the file specified by <b>pszPath</b>. Rather, it should act as if the file specified by <b>pszPath</b> exists with the file attributes passed in <b>dwFileAttributes</b>. This flag cannot be combined with the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.Attributes"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.ExeType"/>, or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.PIDL"/> flags.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint">
            <summary>
            A wrapper for the native POINT structure.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the NativePoint
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.X">
            <summary>
            The X coordinate of the point
            </summary>        
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.Y">
            <summary>
            The Y coordinate of the point
            </summary>                                
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.op_Equality(Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint,Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint)">
            <summary>
            Determines if two NativePoints are equal.
            </summary>
            <param name="first">First NativePoint</param>
            <param name="second">Second NativePoint</param>
            <returns>True if first NativePoint is equal to the second; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.op_Inequality(Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint,Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint)">
            <summary>
            Determines if two NativePoints are not equal.
            </summary>
            <param name="first">First NativePoint</param>
            <param name="second">Second NativePoint</param>
            <returns>True if first NativePoint is not equal to the second; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.Equals(System.Object)">
            <summary>
            Determines if this NativePoint is equal to another.
            </summary>
            <param name="obj">Another NativePoint to compare</param>
            <returns>True if this NativePoint is equal obj; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint.GetHashCode">
            <summary>
            Gets a hash code for the NativePoint.
            </summary>
            <returns>Hash code for the NativePoint</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect">
            <summary>
            A wrapper for a RECT struct
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.Left">
            <summary>
            Position of left edge
            </summary>            
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.Top">
            <summary>
            Position of top edge
            </summary>            
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.Right">
            <summary>
            Position of right edge
            </summary>            
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.Bottom">
            <summary>
            Position of bottom edge
            </summary>            
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new NativeRect initialized with supplied values.
            </summary>
            <param name="left">Position of left edge</param>
            <param name="top">Position of top edge</param>
            <param name="right">Position of right edge</param>
            <param name="bottom">Position of bottom edge</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.op_Equality(Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect,Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect)">
            <summary>
            Determines if two NativeRects are equal.
            </summary>
            <param name="first">First NativeRect</param>
            <param name="second">Second NativeRect</param>
            <returns>True if first NativeRect is equal to second; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.op_Inequality(Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect,Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect)">
            <summary>
            Determines if two NativeRects are not equal
            </summary>
            <param name="first">First NativeRect</param>
            <param name="second">Second NativeRect</param>
            <returns>True if first is not equal to second; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.Equals(System.Object)">
            <summary>
            Determines if the NativeRect is equal to another Rect.
            </summary>
            <param name="obj">Another NativeRect to compare</param>
            <returns>True if this NativeRect is equal to the one provided; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.NativeRect.GetHashCode">
            <summary>
            Creates a hash code for the NativeRect
            </summary>
            <returns>Returns hash code for this NativeRect</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.MoveFileWithProgressW(System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine,System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags)">
            <summary>
            <para>Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.</para>
            <para>To perform this operation as a transacted operation, use the MoveFileTransacted function.</para>
            </summary>
            <param name="lpExistingFileName"><para>The name of the existing file or directory on the local computer.</para>
            <para>If <paramref name="dwFlags"/> specifies <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.DelayUntilReboot"/>, the file cannot exist on a remote share because delayed operations are performed before the network is available.</para>
            <para>See Remarks section about the <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> limitation.</para></param>
            <param name="lpNewFileName"><para>The new name of the file or directory on the local computer.</para>
            <para>When moving a file, <paramref name="lpNewFileName"/> can be on a different file system or volume. If <paramref name="lpNewFileName"/> is on another drive, you must set the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.CopyAllowed"/> flag in <paramref name="dwFlags"/>.</para>
            <para>When moving a directory, <paramref name="lpExistingFileName"/> and <paramref name="lpNewFileName"/> must be on the same drive.</para>
            <para>If <paramref name="dwFlags"/> specifies <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags.DelayUntilReboot"/> and <paramref name="lpNewFileName"/> is <see langword="null"/>, <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.MoveFileWithProgressW(System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine,System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags)"/> registers <paramref name="lpExistingFileName"/> to be deleted when the system restarts. The function fails if it cannot access the registry to store the information about the delete operation. If <paramref name="lpExistingFileName"/> refers to a directory, the system removes the directory at restart only if the directory is empty.</para>
            <para>See Remarks section about the <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> limitation.</para></param>
            <param name="lpProgressRoutine">A <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine"/> callback function that is called each time another portion of the file has been moved. The callback function can be useful if you provide a user interface that displays the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="lpData">An argument to be passed to the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <param name="dwFlags">The move options. This parameter can be one or more of the values of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags"/>.</param>
            <returns><para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</para>
            <para>When moving a file across volumes, if <paramref name="lpProgressRoutine"/> returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult.Cancel"/> (or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult.Stop"/>) due to the user canceling (or stopping) the operation, <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.MoveFileWithProgressW(System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine,System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags)"/> will return zero and <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> will return <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.RequestAborted"/>. The existing file is left intact.</para></returns>
            <remarks><para>The names are limited to <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> characters. To extend this limit to 32,767 wide characters, prepend "\?" to the path. For more information, see Naming a File: https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file
            </para>
            <para>Tip: Starting with Windows 10, version 1607, you can opt-in to remove the <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of Naming Files, Paths, and Namespaces for details.</para>
            <para>The <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.MoveFileWithProgressW(System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine,System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.MoveFileFlags)"/> function coordinates its operation with the link tracking service, so link sources can be tracked as they are moved.</para>
            <para>To delete or rename a file, you must have either delete permission on the file or delete child permission in the parent directory. If you set up a directory with all access except delete and delete child and the ACLs of new files are inherited, then you should be able to create a file without being able to delete it. However, you can then create a file, and you will get all the access you request on the handle returned to you at the time you create the file. If you requested delete permission at the time you created the file, you could delete or rename the file with that handle but not with any other.</para></remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.SHGetFileInfo(System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes,Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO@,System.UInt32,Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions)">
            <summary>
            Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
            </summary>
            <param name="pszPath"><para>A string of maximum length <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> that contains the path and file name. Both absolute and relative paths are valid.</para>
            <para>If the <paramref name="uFlags"/> parameter includes the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.PIDL"/> flag, this parameter must be the address of an ITEMIDLIST(PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
            <para>If the <paramref name="uFlags"/> parameter includes the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.UseFileAttributes"/> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <paramref name="dwFileAttributes"/> parameter. This allows you to obtain information about a file type by passing just the extension for <paramref name="pszPath"/> and passing <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes.Normal"/> in <paramref name="dwFileAttributes"/>.</para>
            <para>This string can use either short (the 8.3 form) or long file names.</para></param>
            <param name="dwFileAttributes">A combination of one or more <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes"/> flags. If <paramref name="uFlags"/> does not include the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.UseFileAttributes"/> flag, this parameter is ignored.</param>
            <param name="psfi">A <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO"/> structure to receive the file information.</param>
            <param name="cbFileInfo">The size, in bytes, of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO"/> structure pointed to by the <paramref name="psfi"/> parameter.</param>
            <param name="uFlags">The flags that specify the file information to retrieve. This parameter can be a combination of the values of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions"/> enum.</param>
            <returns><para>Returns a value whose meaning depends on the <paramref name="uFlags"/> parameter.</para>
            <para>If <paramref name="uFlags"/> does not contain <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.ExeType"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.SysIconIndex"/>, the return value is nonzero if successful, or zero otherwise.</para>
            <para>If <paramref name="uFlags"/> contains the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.ExeType"/> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
            Return code                                    | Description
            -----------------------------------------------+------------------------------------------
            0                                              | Nonexecutable file or an error condition.
            LOWORD = NE or PE and HIWORD = Windows version | Windows application.
            LOWORD = MZ and HIWORD = 0                     | MS-DOS.exe or .com file
            LOWORD = PE and HIWORD = 0                     | Console application or.bat file</returns>
            <remarks><para>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</para>
            <para>If <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.SHGetFileInfo(System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes,Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO@,System.UInt32,Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions)"/> returns an icon handle in the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.hIcon"/> member of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO"/> structure pointed to by <b>psfi</b>, you are responsible for freeing it with <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Core.DestroyIcon(System.IntPtr)"/> when you no longer need it.</para>
            <para>Note: Once you have a handle to a system image list, you can use the <b>Image List API</b> to manipulate it like any other image list. Because system image lists are created on a per-process basis, you should treat them as read-only objects. Writing to a system image list may overwrite or delete one of the system images, making it unavailable or incorrect for the remainder of the process.</para>
            <para>When you use the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.GetFileInfoOptions.ExeType"/> flag with a Windows application, the Windows version of the executable is given in the HIWORD of the return value. This version is returned as a hexadecimal value. For details on equating this value with a specific Windows version, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.CopyFileEx(System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine,System.IntPtr,System.Boolean@,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags)" -->
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine">
            <summary>
            An application-defined callback for some file management. It is called when a portion of a copy or move operation is completed. The LPPROGRESS_ROUTINE type defines a pointer to this callback function. CopyProgressRoutine is a placeholder for the application-defined function name.
            </summary>
            <param name="TotalFileSize">The total size of the file, in bytes.</param>
            <param name="TotalBytesTransferred">The total number of bytes transferred from the source file to the destination file since the copy operation began.</param>
            <param name="StreamSize">The total size of the current file stream, in bytes.</param>
            <param name="StreamBytesTransferred">The total number of bytes in the current stream that have been transferred from the source file to the destination file since the copy operation began.</param>
            <param name="dwStreamNumber">A handle to the current stream. The first time CopyProgressRoutine is called, the stream number is 1.</param>
            <param name="dwCallbackReason">The reason that <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine"/> was called. This parameter can be one of the values of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressCallbackReason"/> enum.</param>
            <param name="hSourceFile">A handle to the source file.</param>
            <param name="hDestinationFile">A handle to the destination file.</param>
            <param name="lpData">Argument passed to CopyProgressRoutine by <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Shell.CopyFileEx(System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressRoutine,System.IntPtr,System.Boolean@,Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyFileFlags)"/>, MoveFileTransacted, or MoveFileWithProgress.</param>
            <returns>The CopyProgressRoutine function should return one of the values of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.CopyProgressResult"/> enum.</returns>
            <remarks>An application can use this information to display a progress bar that shows the total number of bytes copied as a percent of the total file size.</remarks>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException">
            <summary>
            An exception thrown when an error occurs while dealing with ShellObjects.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(Microsoft.WindowsAPICodePack.Win32Native.HResult)">
            <summary>
            Initializes a new exception using an HResult
            </summary>
            <param name="result">HResult error</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(System.String)">
            <summary>
            Initializes an excpetion with a custom message.
            </summary>
            <param name="message">Custom message</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an exception with custom message and inner exception.
            </summary>
            <param name="message">Custom message</param>
            <param name="innerException">The original exception that preceded this exception</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an exception with custom message and error code.
            </summary>
            <param name="message">Custom message</param>
            <param name="errorCode">HResult error code</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(System.String,Microsoft.WindowsAPICodePack.Win32Native.HResult)">
            <summary>
            Initializes an exception with custom message and error code.
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(System.Int32)">
            <summary>
            Initializes an exception with custom message and inner exception.
            </summary>
            <param name="errorCode">HRESULT of an operation</param>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialization info and a context.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanCopy">
            <summary>
            The specified items can be copied.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanMove">
            <summary>
            The specified items can be moved.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanLink">
            <summary>
            Shortcuts can be created for the specified items. This flag has the same value as DROPEFFECT. 
            The normal use of this flag is to add a Create Shortcut item to the shortcut menu that is displayed 
            during drag-and-drop operations. However, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanLink"/> also adds a Create Shortcut item to the Microsoft 
            Windows Explorer's File menu and to normal shortcut menus. 
            If this item is selected, your application's IContextMenu.InvokeCommand is invoked with the lpVerb 
            member of the CMINVOKECOMMANDINFO structure set to "link." Your application is responsible for creating the link.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Storage">
            <summary>
            The specified items can be bound to an IStorage interface through IShellFolder.BindToObject.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanRename">
            <summary>
            The specified items can be renamed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanDelete">
            <summary>
            The specified items can be deleted.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.HasPropertySheet">
            <summary>
            The specified items have property sheets.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.DropTarget">
            <summary>
            The specified items are drop targets.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CapabilityMask">
            <summary>
            This flag is a mask for the capability flags.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.System">
            <summary>
            Windows 7 and later. The specified items are system items.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Encrypted">
            <summary>
            The specified items are encrypted.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.IsSlow">
            <summary>
            Indicates that accessing the object = through <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> or other storage interfaces, 
            is a slow operation. 
            Applications should avoid accessing items flagged with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.IsSlow"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Ghosted">
            <summary>
            The specified items are ghosted icons.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Link">
            <summary>
            The specified items are shortcuts.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Share">
            <summary>
            The specified folder objects are shared.
            </summary>    
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.ReadOnly">
            <summary>
            The specified items are read-only. In the case of folders, this means 
            that new items cannot be created in those folders.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Hidden">
            <summary>
            The item is hidden and should not be displayed unless the 
            Show hidden files and folders option is enabled in Folder Settings.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.DisplayAttributeMask">
            <summary>
            This flag is a mask for the display attributes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.FileSystemAncestor">
            <summary>
            The specified folders contain one or more file system folders.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Folder">
            <summary>
            The specified items are folders.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.FileSystem">
            <summary>
            The specified folders or file objects are part of the file system 
            that is, they are files, directories, or root directories).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.HasSubFolder">
            <summary>
            The specified folders have subfolders = and are, therefore, 
            expandable in the left pane of Windows Explorer).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.ContentsMask">
            <summary>
            This flag is a mask for the contents attributes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Validate">
            <summary>
            When specified as input, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Validate"/> instructs the folder to validate that the items 
            pointed to by the contents of apidl exist. If one or more of those items do not exist, 
            IShellFolder.GetAttributesOf returns a failure code. 
            When used with the file system folder, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Validate"/> instructs the folder to discard cached 
            properties retrieved by clients of IShellFolder2.GetDetailsEx that may 
            have accumulated for the specified items.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Removable">
            <summary>
            The specified items are on removable media or are themselves removable devices.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Compressed">
            <summary>
            The specified items are compressed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Browsable">
            <summary>
            The specified items can be browsed in place.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Nonenumerated">
            <summary>
            The items are nonenumerated items.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.NewContent">
            <summary>
            The objects contain new content.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.CanMoniker">
            <summary>
            It is possible to create monikers for the specified file objects or folders.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.HasStorage">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Stream">
            <summary>
            Indicates that the item has a stream associated with it that can be accessed 
            by a call to IShellFolder.BindToObject with IID_IStream in the riid parameter.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.StorageAncestor">
            <summary>
            Children of this item are accessible through <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> or IStorage. 
            Those children are flagged with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Storage"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Stream"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.StorageCapabilityMask">
            <summary>
            This flag is a mask for the storage capability attributes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.PkeyMask">
            <summary>
            Mask used by PKEY_SFGAOFlags to remove certain values that are considered 
            to cause slow calculations or lack context. 
            Equal to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.Validate"/> | <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.IsSlow"/> | <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellFileGetAttributesOptions.HasSubFolder"/>.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO">
            <summary>
            Contains information about a file object.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.hIcon">
            <summary>
            A handle to the icon that represents the file. You are responsible for destroying this handle with DestroyIcon when you no longer need it.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.iIcon">
            <summary>
            The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.dwAttributes">
            <summary>
            An array of values that indicates the attributes of the file object. For information about these values, see the IShellFolder.GetAttributesOf method.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.szDisplayName">
            <summary>
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.SHFILEINFO.szTypeName">
            <summary>
            A string that describes the type of file.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.DesktopWindowManager">
            <summary>
            public class that contains interop declarations for 
            functions that are not benign and are performance critical. 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.DesktopWindowManager.SetIconicThumbnail(System.IntPtr,System.IntPtr)">
            <summary>
            Sets the specified iconic thumbnail for the specified window.
            This is typically done in response to a DWM message.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="hBitmap">The thumbnail bitmap.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.DesktopWindowManager.SetPeekBitmap(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Sets the specified peek (live preview) bitmap for the specified
            window.  This is typically done in response to a DWM message.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="bitmap">The thumbnail bitmap.</param>
            <param name="displayFrame">Whether to display a standard window
            frame around the bitmap.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.DesktopWindowManager.SetPeekBitmap(System.IntPtr,System.IntPtr,System.Drawing.Point,System.Boolean)">
            <summary>
            Sets the specified peek (live preview) bitmap for the specified
            window.  This is typically done in response to a DWM message.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="bitmap">The thumbnail bitmap.</param>
            <param name="offset">The client area offset at which to display
            the specified bitmap.  The rest of the parent window will be
            displayed as "remembered" by the DWM.</param>
            <param name="displayFrame">Whether to display a standard window
            frame around the bitmap.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.DesktopWindowManager.EnableCustomWindowPreview(System.IntPtr,System.Boolean)">
            <summary>
            Call this method to either enable custom previews on the taskbar (second argument as true)
            or to disable (second argument as false). If called with True, the method will call DwmSetWindowAttribute
            for the specific window handle and let DWM know that we will be providing a custom bitmap for the thumbnail
            as well as Aero peek.
            </summary>
            <param name="hwnd"></param>
            <param name="enable"></param>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction">
            <summary>
            The action to be performed by the <see cref="!:TabbedThumbnailNativeMethods.ChangeWindowMessageFilterEx(IntPtr, WindowMessage, MessageFilterAction, ref ChangeFilterStruct)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Reset">
            <summary>
            Resets the window message filter for hWnd to the default. Any message allowed globally or process-wide will get through, but any message not included in those two categories, and which comes from a lower privileged process, will be blocked.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Allow">
            <summary>
            Allows the message through the filter. This enables the message to be received by hWnd, regardless of the source of the message, even it comes from a lower privileged process.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Disallow">
            <summary>
            Blocks the message to be delivered to hWnd if it comes from a lower privileged process, unless the message is allowed process-wide by using the ChangeWindowMessageFilter function or globally.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageResultInfo">
            <summary>
            Result info for the <see cref="!:TabbedThumbnailNativeMethods.ChangeWindowMessageFilterEx(IntPtr, ushort, MessageFilterAction, ref ChangeFilterStruct)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageResultInfo.None">
            <summary>
            See the Remarks section of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.ChangeFilterStruct"/> structure. Applies to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Allow"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Disallow"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageResultInfo.AlreadyAllowedForWindow">
            <summary>
            The message has already been allowed by this window's message filter, and the function thus succeeded with no change to the window's message filter. Applies to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Allow"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageResultInfo.AlreadyDisallowedForWindow">
            <summary>
            The message has already been blocked by this window's message filter, and the function thus succeeded with no change to the window's message filter. Applies to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Disallow"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageResultInfo.AllowedHigher">
            <summary>
            The message is allowed at a scope higher than the window. Applies to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.MessageFilterAction.Disallow"/>.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.GetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To retrieve any other value, specify one of the values of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum"/> enum.</param>
            <returns>
            <para>If the function succeeds, the return value is the requested value.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.GetLastWin32Error"/>.</para>
            <para>If <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLong32(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)"/>, <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)"/> or <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLongPtr64(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)"/> has not been called previously, <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.GetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum)"/> returns zero for values in the extra window or class memory.</para>
            </returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)">
            <summary>
            <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.</para>
            <para>This helper static method is required because the 32-bit version of user32.dll does not contain this API
            (on any versions of Windows), so linking the method will fail at run-time. The bridge dispatches the request
            to the correct function (<see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.GetWindowLongPtr32(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum)"/> in 32-bit mode and <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.GetWindowLongPtr64(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum)"/> in 64-bit mode).</para>
            </summary>
            <param name="hWnd"><para>A handle to the window and, indirectly, the class to which the window belongs. The <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)"/> function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
            <para>Windows XP/2000: The <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)"/> function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.</para></param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To set any other value, specify one of the values of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum"/>.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns><para>If the function succeeds, the return value is the previous value of the specified offset.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.GetLastWin32Error"/>.</para>
            <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling SetLastError with 0, then call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.HandlerNativeMethods.SetWindowLongPtr(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.DesktopWindowManager.GetWindowLongEnum,System.Int64)"/>.Function failure will be indicated by a return value of zero and a <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.GetLastWin32Error"/> result that is nonzero.</para></returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.DefinitionOptions">
            <summary>
            Specifies behaviors for known folders.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DefinitionOptions.None">
            <summary>
            No behaviors are defined.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DefinitionOptions.LocalRedirectOnly">
            <summary>
            Prevents a per-user known folder from being 
            redirected to a network location.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DefinitionOptions.Roamable">
            <summary>
            The known folder can be roamed through PC-to-PC synchronization.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.DefinitionOptions.Precreate">
            <summary>
            Creates the known folder when the user first logs on.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.FolderCategory">
            <summary>
            Specifies the categories for known folders.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FolderCategory.None">
            <summary>
            The folder category is not specified.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FolderCategory.Virtual">
            <summary>
            The folder is a virtual folder. Virtual folders are not part 
            of the file system. For example, Control Panel and 
            Printers are virtual folders. A number of properties 
            such as folder path and redirection do not apply to this category.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FolderCategory.Fixed">
            <summary>
            The folder is fixed. Fixed file system folders are not 
            managed by the Shell and are usually given a permanent 
            path when the system is installed. For example, the 
            Windows and Program Files folders are fixed folders. 
            A number of properties such as redirection do not apply 
            to this category.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FolderCategory.Common">
            <summary>
            The folder is a common folder. Common folders are 
            used for sharing data and settings 
            accessible by all users of a system. For example, 
            all users share a common Documents folder as well 
            as their per-user Documents folder.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FolderCategory.PerUser">
            <summary>
            Each user has their own copy of the folder. Per-user folders 
            are those stored under each user's profile and 
            accessible only by that user.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.KnownFoldersSafeNativeMethods">
            <summary>
            Internal class that contains interop declarations for 
            functions that are considered benign but that
            are performance critical. 
            </summary>
            <remarks>
            Functions that are benign but not performance critical 
            should be located in the NativeMethods class.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON.RmRebootReasonNone">
            <summary>
            Reboot not required.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON.RmRebootReasonPermissionDenied">
            <summary>
            Current user does not have permission to shut down one or more detected processes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON.RmRebootReasonSessionMismatch">
            <summary>
            One or more processes are running in another TS session.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON.RmRebootReasonCriticalProcess">
            <summary>
            A critical process has been detected.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON.RmRebootReasonCriticalService">
            <summary>
            A critical service has been detected.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON.RmRebootReasonDetectedSelf">
            <summary>
            The current process has been detected.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE">
            <summary>
            Specifies the type of application that is described by the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO"/> structure.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmUnknownApp">
            <summary>
            The application cannot be classified as any other type.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmMainWindow">
            <summary>
            A Windows application run as a stand-alone process that displays a top-level window.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmOtherWindow">
            <summary>
            A Windows application that does not run as a stand-alone process and does not display a top-level window.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmService">
            <summary>
            The application is a Windows service.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmExplorer">
            <summary>
            The application is Windows Explorer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmConsole">
            <summary>
            The application is a stand-alone console application.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_APP_TYPE.RmCritical">
            <summary>
            A system restart is required to complete the installation because a process cannot be shut down.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.NativeMethods.RmRegisterResources(System.UInt32,System.UInt32,System.String[],System.UInt32,Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS[],System.UInt32,System.String[])">
            <summary>
            Registers resources to a Restart Manager session. The Restart Manager uses the list of resources registered with the session to determine which applications and services must be shut down and restarted. Resources can be identified by file names, service short names, or <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS"/> structures that describe running applications.
            </summary>
            <param name="dwSessionHandle">A handle to an existing Restart Manager session.</param>
            <param name="nFiles">The number of files being registered</param>
            <param name="rgsFileNames">An array of null-terminated strings of full filename paths.</param>
            <param name="nApplications">The number of processes being registered</param>
            <param name="rgApplications">An array of <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS"/> structures</param>
            <param name="nServices">The number of services to be registered</param>
            <param name="rgsServiceNames">An array of null-terminated strings of service short names.</param>
            <returns><para>The function can return one of the system error codes that are defined in Winerror.h</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.SemTimeOut"/>: Failed to obtain semaphore lock in allotted time.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.BadArguments"/>: An invalid argument was supplied to the function.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.WriteFault"/>: Read/write operation failed.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.OutOfMemory"/>: Could not allocate memory or instantiate class object.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InvalidHandle"/>: No session exists for the supplied handle.</para></returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.NativeMethods.RmStartSession(System.UInt32@,System.UInt32,System.String)">
            <summary>
            Starts a new Restart Manager session. A maximum of 64 Restart Manager sessions per user session can be open on the system at the same time. When this function starts a session, it returns a session handle and session key that can be used in subsequent calls to the Restart Manager API.
            </summary>
            <param name="pSessionHandle">A pointer to the handle of a Restart Manager session.</param>
            <param name="dwSessionFlags">Reserved. This parameter should be 0.</param>
            <param name="strSessionKey">A null-terminated string that contains the session key to the new session.</param>
            <returns><para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.SemTimeOut"/>: Failed to obtain semaphore lock in allotted time.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.BadArguments"/>: An invalid argument was supplied to the function.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.WriteFault"/>: Read/write operation failed.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.OutOfMemory"/>: Could not allocate memory or instantiate class object.</para></returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.NativeMethods.RmEndSession(System.UInt32)">
            <summary>
            Ends the Restart Manager session. This function should be called by the primary installer that has previously started the session by calling the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.NativeMethods.RmStartSession(System.UInt32@,System.UInt32,System.String)"/> function. The <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.NativeMethods.RmEndSession(System.UInt32)"/> function can be called by a secondary installer that is joined to the session once no more resources need to be registered by the secondary installer.
            </summary>
            <param name="pSessionHandle">A handle to an existing Restart Manager session.</param>
            <returns><para>The function can return one of the system error codes that are defined in Winerror.h.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.SemTimeOut"/>: Failed to obtain semaphore lock in allotted time.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.BadArguments"/>: An invalid argument was supplied to the function.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.WriteFault"/>: Read/write operation failed.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.OutOfMemory"/>: Could not allocate memory or instantiate class object.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InvalidHandle"/>: No session exists for the supplied handle.</para></returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.NativeMethods.RmGetList(System.UInt32,System.UInt32@,System.UInt32@,Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO[],Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON@)">
            <summary>
            Gets a list of all applications and services that are currently using resources that have been registered with the Restart Manager session.
            </summary>
            <param name="dwSessionHandle">A handle to an existing Restart Manager session.</param>
            <param name="pnProcInfoNeeded">A pointer to an array size necessary to receive RM_PROCESS_INFO structures required to return information for all affected applications and services.</param>
            <param name="pnProcInfo">A pointer to the total number of <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO"/> structures in an array and number of structures filled.</param>
            <param name="rgAffectedApps">An array of <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO"/> structures that list the applications and services using resources that have been registered with the session.</param>
            <param name="lpdwRebootReasons">Pointer to location that receives a value of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_REBOOT_REASON"/> enumeration that describes the reason a system restart is needed.</param>
            <returns><para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.MoreData"/>: Buffer is not large enough for all information.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.Cancelled"/>: Operation was cancelled by user.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.SemTimeOut"/>: Failed to obtain semaphore lock in allotted time.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.BadArguments"/>: An invalid argument was supplied to the function.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.WriteFault"/>: Read/write operation failed.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.OutOfMemory"/>: Could not allocate memory or instantiate class object.</para>
            <para><see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InvalidHandle"/>: No session exists for the supplied handle.</para></returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO">
            <summary>
            Describes an application that is to be registered with the Restart Manager.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.Process">
            <summary>
            Contains an <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS"/> structure that uniquely identifies the application by its PID and the time the process began.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.strAppName">
            <summary>
            If the process is a service, this parameter returns the long name for the service.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.strServiceShortName">
            <summary>
            If the process is a service, this is the short name for the service.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.ApplicationType">
            <summary>
            Contains an RM_APP_TYPE enumeration value.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.AppStatus">
            <summary>
            Contains a bit mask that describes the current status of the application.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.TSSessionId">
            <summary>
            Contains the Terminal Services session ID of the process.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_PROCESS_INFO.bRestartable">
            <summary>
            <see langword="true"/> if the application can be restarted by the Restart Manager; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS">
            <summary>
            Uniquely identifies a process by its PID and the time the process began. An array of <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS"/> structures can be passed to the RmRegisterResources function.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS.dwProcessId">
            <summary>
            The product identifier (PID).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.RestartManager.RM_UNIQUE_PROCESS.ProcessStartTime">
            <summary>
            The creation time of the process.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes">
            <summary>
            Describes the event that has occurred. 
            Typically, only one event is specified at a time. 
            If more than one event is specified, 
            the values contained in the dwItem1 and dwItem2 parameters must be the same, 
            respectively, for all specified events. 
            This parameter can be one or more of the following values:
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.ItemRename">
            <summary>
            The name of a nonfolder item has changed. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the previous PIDL or name of the item. 
            dwItem2 contains the new PIDL or name of the item.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.ItemCreate">
            <summary>
            A nonfolder item has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the item that was created.
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.ItemDelete">
            <summary>
            A nonfolder item has been deleted. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the item that was deleted. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DirectoryCreate">
            <summary>
            A folder has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the folder that was created. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DirectoryDelete">
            <summary>
            A folder has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the folder that was removed. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.MediaInsert">
            <summary>
            Storage media has been inserted into a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the root of the drive that contains the new media. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.MediaRemove">
            <summary>
            Storage media has been removed from a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the root of the drive from which the media was removed. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DriveRemove">
            <summary>
            A drive has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the root of the drive that was removed. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DriveAdd">
            <summary>
            A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the root of the drive that was added. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.NetShare">
            <summary>
            A folder on the local computer is being .Shared via the network. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the folder that is being .Shared. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.NetUnshare">
            <summary>
            A folder on the local computer is no longer being .Shared via the network. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the folder that is no longer being .Shared. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.AttributesChange">
            <summary>
            The attributes of an item or folder have changed. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the item or folder that has changed.
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DirectoryContentsUpdate">
            <summary>
            The contents of an existing folder have changed, but the folder still exists and has not been renamed. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the folder that has changed. 
            dwItem2 is not used and should be NULL. 
            If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or SHCNE_RENAMEFOLDER, respectively.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.Update">
            <summary>
            An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the item that has changed. 
            dwItem2 is not used and should be NULL. 
            If a nonfolder item has been created, deleted, or renamed, 
            use SHCNE_CREATE, SHCNE_DELETE, or SHCNE_RENAMEITEM, respectively, instead.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.ServerDisconnect">
            <summary>
            The computer has disconnected from a server. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the server from which the computer was disconnected. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.SystemImageUpdate">
            <summary>
            An image in the system image list has changed. 
            SHCNF_DWORD must be specified in uFlags.
            dwItem1 is not used and should be NULL.
            dwItem2 contains the index in the system image list that has changed.         
            </summary> //verify this is not opposite?
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DirectoryRename">
            <summary>
            The name of a folder has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the previous PIDL or name of the folder. 
            dwItem2 contains the new PIDL or name of the folder.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.FreeSpace">
            <summary>
            The amount of free space on a drive has changed. 
            SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. 
            dwItem1 contains the root of the drive on which the free space changed. 
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.AssociationChange">
            <summary>
            A file type association has changed. 
            SHCNF_IDLIST must be specified in the uFlags parameter. 
            dwItem1 and dwItem2 are not used and must be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.DiskEventsMask">
            <summary>
            Specifies a combination of all of the disk event identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.GlobalEventsMask">
            <summary>
            Specifies a combination of all of the global event identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.AllEventsMask">
            <summary>
            All events have occurred.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.ShellObjectChangeTypes.FromInterrupt">
            <summary>
            The specified event occurred as a result of a system interrupt. 
            As this value modifies other event values, it cannot be used alone.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message">
            <summary>
            Wraps the native Windows MSG structure.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.WindowHandle">
            <summary>
            Gets the window handle
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.Msg">
            <summary>
            Gets the window message
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.WParam">
            <summary>
            Gets the WParam
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.LParam">
            <summary>
            Gets the LParam
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.Time">
            <summary>
            Gets the time
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.Point">
            <summary>
            Gets the point
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.#ctor(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Int32,Microsoft.WindowsAPICodePack.Win32Native.Shell.NativePoint)">
            <summary>
            Creates a new instance of the Message struct
            </summary>
            <param name="windowHandle">Window handle</param>
            <param name="msg">Message</param>
            <param name="wparam">WParam</param>
            <param name="lparam">LParam</param>
            <param name="time">Time</param>
            <param name="point">Point</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.op_Equality(Microsoft.WindowsAPICodePack.Win32Native.Shell.Message,Microsoft.WindowsAPICodePack.Win32Native.Shell.Message)">
            <summary>
            Determines if two messages are equal.
            </summary>
            <param name="first">First message</param>
            <param name="second">Second message</param>
            <returns>True if first and second message are equal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.op_Inequality(Microsoft.WindowsAPICodePack.Win32Native.Shell.Message,Microsoft.WindowsAPICodePack.Win32Native.Shell.Message)">
            <summary>
            Determines if two messages are not equal.
            </summary>
            <param name="first">First message</param>
            <param name="second">Second message</param>
            <returns>True if first and second message are not equal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.Equals(System.Object)">
            <summary>
            Determines if this message is equal to another.
            </summary>
            <param name="obj">Another message</param>
            <returns>True if this message is equal argument; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Shell.Message.GetHashCode">
            <summary>
            Gets a hash code for the message.
            </summary>
            <returns>Hash code for this message.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.SingleInstanceNativeMethods.MessageHandler">
            <summary>
            Delegate declaration that matches WndProc signatures.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconSize">
            <summary>
            Specifies options for the size of the stock icon.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconSize.Small">
            <summary>
            Retrieve the small version of the icon, as specified by SM_CXSMICON and SM_CYSMICON system metrics.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconSize.Large">
            <summary>
            Retrieve the large version of the icon, as specified by SM_CXICON and SM_CYICON system metrics.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconSize.ShellSize">
            <summary>
            Retrieve the shell-sized icons (instead of the size specified by the system metrics).
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier">
            <summary>
            Provides values used to specify which standard icon to retrieve. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DocumentNotAssociated">
            <summary>
            Icon for a document (blank page), no associated program.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DocumentAssociated">
            <summary>
            Icon for a document with an associated program.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Application">
            <summary>
             Icon for a generic application with no custom icon.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Folder">
            <summary>
             Icon for a closed folder.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.FolderOpen">
            <summary>
            Icon for an open folder. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Drive525">
            <summary>
            Icon for a 5.25" floppy disk drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Drive35">
            <summary>
             Icon for a 3.5" floppy disk drive. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveRemove">
            <summary>
             Icon for a removable drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveFixed">
            <summary>
             Icon for a fixed (hard disk) drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveNetwork">
            <summary>
             Icon for a network drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveNetworkDisabled">
            <summary>
             Icon for a disconnected network drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveCD">
            <summary>
             Icon for a CD drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveRam">
            <summary>
             Icon for a RAM disk drive. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.World">
            <summary>
             Icon for an entire network. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Server">
            <summary>
             Icon for a computer on the network.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Printer">
            <summary>
             Icon for a printer. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MyNetwork">
            <summary>
            Icon for My Network places.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Find">
            <summary>
            Icon for search (magnifying glass).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Help">
            <summary>
             Icon for help.     
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Share">
            <summary>
             Icon for an overlay indicating .Shared items.        
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Link">
            <summary>
             Icon for an overlay indicating shortcuts to items.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.SlowFile">
            <summary>
            Icon for an overlay for slow items.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Recycler">
            <summary>
             Icon for a empty recycle bin.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.RecyclerFull">
            <summary>
             Icon for a full recycle bin.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCDAudio">
            <summary>
             Icon for audio CD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Lock">
            <summary>
             Icon for a security lock.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.AutoList">
            <summary>
             Icon for a auto list.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.PrinterNet">
            <summary>
            Icon for a network printer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.ServerShare">
            <summary>
             Icon for a server share.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.PrinterFax">
            <summary>
             Icon for a Fax printer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.PrinterFaxNet">
            <summary>
            Icon for a networked Fax printer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.PrinterFile">
            <summary>
             Icon for print to file.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Stack">
            <summary>
            Icon for a stack.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaSvcd">
            <summary>
             Icon for a SVCD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.StuffedFolder">
            <summary>
             Icon for a folder containing other items.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveUnknown">
            <summary>
             Icon for an unknown drive.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveDvd">
            <summary>
             Icon for a DVD drive. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvd">
            <summary>
            Icon for DVD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvdRam">
            <summary>
             Icon for DVD-RAM media.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvdRW">
            <summary>
            Icon for DVD-RW media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvdR">
            <summary>
             Icon for DVD-R media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvdRom">
            <summary>
             Icon for a DVD-ROM media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCDAudioPlus">
            <summary>
             Icon for CD+ (Enhanced CD) media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCDRW">
            <summary>
             Icon for CD-RW media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCDR">
            <summary>
             Icon for a CD-R media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCDBurn">
            <summary>
             Icon burning a CD.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaBlankCD">
            <summary>
             Icon for blank CD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCDRom">
            <summary>
             Icon for CD-ROM media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.AudioFiles">
            <summary>
             Icon for audio files.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.ImageFiles">
            <summary>
             Icon for image files.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.VideoFiles">
            <summary>
             Icon for video files.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MixedFiles">
            <summary>
             Icon for mixed Files.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.FolderBack">
            <summary>
            Icon for a folder back.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.FolderFront">
            <summary>
             Icon for a folder front.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Shield">
            <summary>
             Icon for a security shield. Use for UAC prompts only.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Warning">
            <summary>
             Icon for a warning.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Info">
            <summary>
             Icon for an informational message.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Error">
            <summary>
             Icon for an error message.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Key">
            <summary>
             Icon for a key.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Software">
            <summary>
             Icon for software.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Rename">
            <summary>
             Icon for a rename.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Delete">
            <summary>
             Icon for delete.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaAudioDvd">
            <summary>
             Icon for audio DVD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaMovieDvd">
            <summary>
             Icon for movie DVD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaEnhancedCD">
            <summary>
             Icon for enhanced CD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaEnhancedDvd">
            <summary>
             Icon for enhanced DVD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaHDDvd">
            <summary>
             Icon for HD-DVD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaBluRay">
            <summary>
             Icon for BluRay media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaVcd">
            <summary>
             Icon for VCD media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvdPlusR">
            <summary>
             Icon for DVD+R media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaDvdPlusRW">
            <summary>
             Icon for DVD+RW media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DesktopPC">
            <summary>
             Icon for desktop computer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MobilePC">
            <summary>
             Icon for mobile computer (laptop/notebook).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Users">
            <summary>
             Icon for users.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaSmartMedia">
            <summary>
             Icon for smart media.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaCompactFlash">
            <summary>
             Icon for compact flash.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DeviceCellPhone">
            <summary>
             Icon for a cell phone.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DeviceCamera">
            <summary>
             Icon for a camera.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DeviceVideoCamera">
            <summary>
             Icon for video camera.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DeviceAudioPlayer">
            <summary>
             Icon for audio player.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.NetworkConnect">
            <summary>
             Icon for connecting to network.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Internet">
            <summary>
             Icon for the Internet.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.ZipFile">
            <summary>
             Icon for a ZIP file.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.Settings">
            <summary>
            Icon for settings.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveHDDVD">
            <summary>
            HDDVD Drive (all types)
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.DriveBluRay">
            <summary>
            Icon for BluRay Drive (all types)
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaHDDVDROM">
            <summary>
            Icon for HDDVD-ROM Media
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaHDDVDR">
            <summary>
            Icon for HDDVD-R Media
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaHDDVDRAM">
            <summary>
            Icon for HDDVD-RAM Media
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaBluRayROM">
            <summary>
            Icon for BluRay ROM Media
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaBluRayR">
            <summary>
            Icon for BluRay R Media
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.MediaBluRayRE">
            <summary>
            Icon for BluRay RE Media (Rewriable and RAM)
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconIdentifier.ClusteredDisk">
            <summary>
            Icon for Clustered disk
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions">
            <summary>
            Specifies options for the appearance of the 
            stock icon.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.Large">
            <summary>
            Retrieve the small version of the icon, as specified by  
            SM_CXICON and SM_CYICON system metrics.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.Small">
            <summary>
            Retrieve the small version of the icon, as specified by  
            SM_CXSMICON and SM_CYSMICON system metrics.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.ShellSize">
            <summary>
            Retrieve the shell-sized icons (instead of the 
            size specified by the system metrics). 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.Handle">
            <summary>
            Specified that the hIcon member of the SHSTOCKICONINFO 
            structure receives a handle to the specified icon.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.SystemIndex">
            <summary>
            Specifies that the iSysImageImage member of the SHSTOCKICONINFO 
            structure receives the index of the specified 
            icon in the system imagelist.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.LinkOverlay">
            <summary>
            Adds the link overlay to the icon.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.StockIconsNativeMethods.StockIconOptions.Selected">
            <summary>
             Adds the system highlight color to the icon.
             </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.DataAccessAndStorage.NativeMethods.FindFirstFile(System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@)">
            <summary>
            Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used). See the Remarks section.
            </summary>
            <param name="lpFileName">
            <para>The directory or path, and the file name. The file name can include wildcard characters, for example, an asterisk (*) or a question mark (?).</para>
            <para>This parameter should not be <see langword="null"/>, an invalid string (for example, an empty string or a string that is missing the terminating null character), or end in a trailing backslash (\).</para>
            <para>If the string ends with a wildcard, period (.), or directory name, the user must have access permissions to the root and all subdirectories on the path.</para>
            <para>In the ANSI version of this function, the name is limited to <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> characters. To extend this limit to 32,767 wide characters, call this Unicode version of the function and prepend "\\?\" to the path. For more information, see <see href="https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file">Naming a File</see>.</para>
            <para>Tip: Starting in Windows 10, version 1607, for the unicode version of this function (<see cref="M:Microsoft.WindowsAPICodePack.Win32Native.DataAccessAndStorage.NativeMethods.FindFirstFile(System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@)"/>), you can opt-in to remove the <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> character limitation without prepending "\\?\". See the "Maximum Path Limitation" section of <see href="https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</see> for details.</para>
            </param>
            <param name="lpFindFileData">Information about a found file or directory.</param>
            <returns>
            <para>If the function succeeds, the return value is a search handle used in a subsequent call to <see cref="!:FindNextFile"/> or <see cref="!:FindClose"/>, and the <paramref name="lpFindFileData"/> parameter contains information about the first file or directory found.</para>
            <para>If the function fails or fails to locate files from the search string in the <paramref name="lpFileName"/> parameter, the return value is <see cref="P:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.InvalidHandleValue"/> and the contents of <paramref name="lpFindFileData"/> are indeterminate. To get extended error information, call the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.GetLastWin32Error"/> function.</para>
            <para>If the function fails because no matching files can be found, the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.GetLastWin32Error"/> function returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.FileNotFound"/>.</para>
            </returns>
            <remarks>
            <para>To specify additional attributes to use in a search, use the <see cref="!:FindFirstFileEx"/> function.</para>
            <para>To perform this operation as a transacted operation, use the <see cref="!:FindFirstFileTransacted"/> function.</para>
            <para>See <see href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstfilew">FindFirstFileW</see> for other remarks.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.State">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.fState"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.ID">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.wID"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.SubMenu">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hSubMenu"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.CheckMarks">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpChecked"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpUnchecked"/> members.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.Type">
            <summary>
            <para>Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.fType"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.dwTypeData"/> members.</para>
            <para>MIIM_TYPE is replaced by <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.Bitmap"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.FType"/>, and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.String"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.Data">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.dwItemData"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.String">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.dwTypeData"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.Bitmap">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpItem"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.FType">
            <summary>
            Retrieves or sets the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.fType"/> member.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.Separator">
            <summary>
            <para>Name: MFT_SEPARATOR</para>
            <para>Description: Specifies that the menu item is a separator. A menu item separator appears as a horizontal dividing line. The dwTypeData and cch members are ignored. This value is valid only in a drop-down menu, submenu, or shortcut menu.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.String">
            <summary>
            <para>Name: MFT_STRING</para>
            <para>Description: Displays the menu item using a text string. The <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.dwTypeData"/> member is the pointer to a null-terminated string, and the cch member is the length of the string.</para>
            <para>Replaced by: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.String"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.Bitmap">
            <summary>
            <para>Name: MFT_BITMAP</para>
            <para>Description: Displays the menu item using a bitmap. The low-order word of the dwTypeData member is the bitmap handle, and the cch member is ignored.</para>
            <para>Replaced by: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfoFlags.Bitmap"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpItem"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.OwnerDraw">
            <summary>
            <para>Name: MFT_OWNERDRAW</para>
            <para>Description: Assigns responsibility for drawing the menu item to the window that owns the menu. The window receives a <see cref="F:Microsoft.WindowsAPICodePack.WindowMessage.MeasureItem"/> message before the menu is displayed for the first time, and a <see cref="F:Microsoft.WindowsAPICodePack.WindowMessage.DrawItem"/> message whenever the appearance of the menu item must be updated. If this value is specified, the dwTypeData member contains an application-defined value.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.MenuBarBreak">
            <summary>
            <para>Name: MFT_MENUBARBREAK</para>
            <para>Description: Places the menu item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu). For a drop-down menu, submenu, or shortcut menu, a vertical line separates the new column from the old.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.MenuBreak">
            <summary>
            <para>Name: MFT_MENUBREAK</para>
            <para>Description: Places the menu item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu). For a drop-down menu, submenu, or shortcut menu, the columns are not separated by a vertical line.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.RightJustify">
            <summary>
            <para>Name: MFT_RIGHTJUSTIFY</para>
            <para>Description: Right-justifies the menu item and any subsequent items. This value is valid only if the menu item is in a menu bar.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.RadioCheck">
            <summary>
            <para>Name: MFT_RADIOCHECK</para>
            <para>Description: Displays selected menu items using a radio-button mark instead of a check mark if the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpChecked"/> member is <see langword="null"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuFlags.RightOrder">
            <summary>
            <para>Name: MFT_RIGHTORDER</para>
            <para>Description: Specifies that menus cascade right-to-left (the default is left-to-right). This is used to support right-to-left languages, such as Arabic and Hebrew.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Grayed">
            <summary>
            <para>Name: MFS_GRAYED</para>
            <para>Description: Disables the menu item and grays it so that it cannot be selected. This is equivalent to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Disabled"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Disabled">
            <summary>
            <para>Name: MFS_DISABLED</para>
            <para>Description: Disables the menu item and grays it so that it cannot be selected. This is equivalent to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Grayed"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Checked">
            <summary>
            <para>Name: MFS_CHECKED</para>
            <para>Description: Checks the menu item. For more information about selected menu items, see the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpChecked"/> member.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Hilite">
            <summary>
            <para>Name: MFS_HILITE</para>
            <para>Description: Highlights the menu item.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Enabled">
            <summary>
            <para>Name: MFS_ENABLED</para>
            <para>Description: Enables the menu item so that it can be selected. This is the default state.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Unchecked">
            <summary>
            <para>Name: MFS_UNCHECKED</para>
            <para>Description: Unchecks the menu item. For more information about clear menu items, see the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuItemInfo.hbmpChecked"/> member.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Unhilite">
            <summary>
            <para>Name: MFS_UNHILITE</para>
            <para>Description: Removes the highlight from the menu item. This is the default state.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.MenuStates.Default">
            <summary>
            <para>Name: MFS_DEFAULT</para>
            <para>Description: Specifies that the menu item is the default. A menu can contain only one default menu item, which is displayed in bold.</para>
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags">
            <summary>
            Options for <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Menus.Menus.TrackPopupMenu(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.LeftButton">
            <summary>
            <para>Name: TPM_LEFTBUTTON</para>
            <para>Description: The user can select menu items with only the left mouse button.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.RightButton">
            <summary>
            <para>Name: TPM_RIGHTBUTTON</para>
            <para>Description: The user can select menu items with both the left and right mouse buttons.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.LeftAlign">
            <summary>
            <para>Name: TPM_LEFTALIGN</para>
            <para>Description: Positions the shortcut menu so that its left side is aligned with the coordinate specified by the x parameter.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.CenterAlign">
            <summary>
            <para>Name: TPM_CENTERALIGN</para>
            <para>Description: Centers the shortcut menu horizontally relative to the coordinate specified by the x parameter.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.RightAlign">
            <summary>
            <para>Name: TPM_RIGHTALIGN</para>
            <para>Description: Positions the shortcut menu so that its right side is aligned with the coordinate specified by the x parameter.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.TopAlign">
            <summary>
            <para>Name: TPM_TOPALIGN</para>
            <para>Description: Positions the shortcut menu so that its top side is aligned with the coordinate specified by the y parameter.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.VerticalCenterAlign">
            <summary>
            <para>Name: TPM_VCENTERALIGN</para>
            <para>Description: Centers the shortcut menu vertically relative to the coordinate specified by the y parameter.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.BottomAlign">
            <summary>
            <para>Name: TPM_BOTTOMALIGN</para>
            <para>Description: Positions the shortcut menu so that its bottom side is aligned with the coordinate specified by the y parameter.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.Horizontal">
            <summary>
            <para>Name: TPM_HORIZONTAL</para>
            <para>Description: If the menu cannot be shown at the specified location without overlapping the excluded rectangle, the system tries to accommodate the requested horizontal alignment before the requested vertical alignment.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.Vertical">
            <summary>
            <para>Name: TPM_VERTICAL</para>
            <para>Description: If the menu cannot be shown at the specified location without overlapping the excluded rectangle, the system tries to accommodate the requested vertical alignment before the requested horizontal alignment.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.NoNotify">
            <summary>
            <para>Name: TPM_NONOTIFY</para>
            <para>Description: The function does not send notification messages when the user clicks a menu item.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.ReturnCommand">
            <summary>
            <para>Name: TPM_RETURNCMD</para>
            <para>Description: The function returns the menu item identifier of the user's selection in the return value.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.Recurse">
            <summary>
            <para>Name: TPM_RECURSE</para>
            <para>Description: Displays a menu when another menu is already displayed. This is intended to support context menus within a menu.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.HorizontalPositionAnimation">
            <summary>
            <para>Name: TPM_HORPOSANIMATION</para>
            <para>Description: Animates the menu from left to right.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.HorizontalNegativeAnimation">
            <summary>
            <para>Name: TPM_HORNEGANIMATION</para>
            <para>Description: Animates the menu from right to left.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.VerticalPositionAnimation">
            <summary>
            <para>Name: TPM_VERPOSANIMATION</para>
            <para>Description: Animates the menu from top to bottom.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.VerticalNegativeAnimation">
            <summary>
            <para>Name: TPM_VERNEGANIMATION</para>
            <para>Description: Animates the menu from bottom to top.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.NoAnimation">
            <summary>
            <para>Name: TPM_NOANIMATION</para>
            <para>Description: Displays menu without animation.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Menus.TrackPopupMenuFlags.LayoutRightToLeft">
            <summary>
            <para>Name: TPM_LAYOUTRTL</para>
            <para>Description: Uses right-to-left text layout. By default, the text layout is left-to-right.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Type.Byte">
            <summary>
            Data is written to the pipe as a stream of bytes. This mode cannot be used with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Read.Message"/>. The pipe does not distinguish bytes written during different write operations.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Type.Message">
            <summary>
            Data is written to the pipe as a stream of messages. The pipe treats the bytes written during each write operation as a message unit. The <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> function returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.MoreData"/> when a message is not read completely. This mode can be used with either <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Read.Message"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Read.Byte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Access.InBound">
            <summary>
            The flow of data in the pipe goes from client to server only. This mode gives the server the equivalent of GENERIC_READ access to the pipe. The client must specify GENERIC_WRITE access when connecting to the pipe. If the client must read pipe settings by calling the GetNamedPipeInfo or GetNamedPipeHandleState functions, the client must specify GENERIC_WRITE and FILE_READ_ATTRIBUTES access when connecting to the pipe.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Access.OutBound">
            <summary>
            The flow of data in the pipe goes from server to client only. This mode gives the server the equivalent of GENERIC_WRITE access to the pipe. The client must specify GENERIC_READ access when connecting to the pipe. If the client must change pipe settings by calling the SetNamedPipeHandleState function, the client must specify GENERIC_READ and FILE_WRITE_ATTRIBUTES access when connecting to the pipe.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Access.Duplex">
            <summary>
            The pipe is bi-directional; both server and client processes can read from and write to the pipe. This mode gives the server the equivalent of GENERIC_READ and GENERIC_WRITE access to the pipe. The client can specify GENERIC_READ or GENERIC_WRITE, or both, when it connects to the pipe using the CreateFile function.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.File.FirstPipeInstance">
            <summary>
            If you attempt to create multiple instances of a pipe with this flag, creation of the first instance succeeds, but creation of the next instance fails with ERROR_ACCESS_DENIED.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.File.WriteThrough">
            <summary>
            Write-through mode is enabled. This mode affects only write operations on byte-type pipes and, then, only when the client and server processes are on different computers. If this mode is enabled, functions writing to a named pipe do not return until the data written is transmitted across the network and is in the pipe's buffer on the remote computer. If this mode is not enabled, the system enhances the efficiency of network operations by buffering data until a minimum number of bytes accumulate or until a maximum time elapses.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.File.Overlapped">
            <summary>
            Overlapped mode is enabled. If this mode is enabled, functions performing read, write, and connect operations that may take a significant time to be completed can return immediately. This mode enables the thread that started the operation to perform other operations while the time-consuming operation executes in the background. For example, in overlapped mode, a thread can handle simultaneous input and output (I/O) operations on multiple instances of a pipe or perform simultaneous read and write operations on the same pipe handle. If overlapped mode is not enabled, functions performing read, write, and connect operations on the pipe handle do not return until the operation is finished. The ReadFileEx and WriteFileEx functions can only be used with a pipe handle in overlapped mode. The ReadFile, WriteFile, ConnectNamedPipe, and TransactNamedPipe functions can execute either synchronously or as overlapped operations.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.NamedPipe">
            <summary>
            Native API for Named Pipes
            https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/remoting/common/RemoteSessionNamedPipe.cs#L124-L256
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.NamedPipe.CreateNamedPipeW(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes)">
            <summary>
            Creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new instance of an existing named pipe.
            </summary>
            <param name="lpName">
            <para>The unique pipe name. This string must have the following form: \\.\pipe\pipename</para>
            <para>The pipename part of the name can include any character other than a backslash, including numbers and special characters. The entire pipe name string can be up to 256 characters long. Pipe names are not case sensitive.</para></param>
            <param name="dwOpenMode">
            <para>The open mode.</para>
            <para>The function fails if <paramref name="dwOpenMode"/> specifies anything other than 0 or the flags listed in the following tables.</para>
            <para>This parameter must specify one of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Access"/> modes. The same mode must be specified for each instance of the pipe.</para>
            <para>This parameter can also include one or more of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.File"/> enum flags, which enable the write-through and overlapped modes. These modes can be different for different instances of the same pipe.</para>
            <para>This parameter can include any combination of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.WriteAccess"/> security access modes. These modes can be different for different instances of the same pipe.</para></param>
            <param name="dwPipeMode"><para>The pipe mode.</para>
            <para>The function fails if dwPipeMode specifies anything other than 0 or the flags listed in the following tables.</para>
            <para>One of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Type"/> modes can be specified. The same type mode must be specified for each instance of the pipe.</para>
            <para>One of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Read"/> modes can be specified. Different instances of the same pipe can specify different read modes.</para>
            <para>One of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.Wait"/> modes can be specified. Different instances of the same pipe can specify different wait modes.</para>
            <para>One of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.RemoteClient"/> modes can be specified. Different instances of the same pipe can specify different remote-client modes.</para></param>
            <param name="nMaxInstances"><para>The maximum number of instances that can be created for this pipe. The first instance of the pipe can specify this value; the same number must be specified for other instances of the pipe. Acceptable values are in the range 1 through <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.NamedPipe.UnlimitedInstances"/> (255).</para>
            <para>If this parameter is <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.NamedPipe.UnlimitedInstances"/>, the number of pipe instances that can be created is limited only by the availability of system resources. If nMaxInstances is greater than <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.NamedPipe.UnlimitedInstances"/>, the return value is INVALID_HANDLE_VALUE and <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InvalidParameter"/>.</para></param>
            <param name="nOutBufferSize">The number of bytes to reserve for the output buffer.</param>
            <param name="nInBufferSize">The number of bytes to reserve for the input buffer.</param>
            <param name="nDefaultTimeOut"><para>The default time-out value, in milliseconds, if the WaitNamedPipe function specifies NMPWAIT_USE_DEFAULT_WAIT. Each instance of a named pipe must specify the same value.</para>
            <para>A value of zero will result in a default time-out of 50 milliseconds.</para></param>
            <param name="lpSecurityAttributes">A pointer to a <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes"/> structure that specifies a security descriptor for the new named pipe and determines whether child processes can inherit the returned handle. If lpSecurityAttributes is <see langword="null"/>, the named pipe gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a named pipe grant full control to the LocalSystem account, administrators, and the creator owner. They also grant read access to members of the Everyone group and the anonymous account.</param>
            <returns><para>If the function succeeds, the return value is a handle to the server end of a named pipe instance.</para>
            <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</para></returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.NamedPipe.NamedPipe.CreateNamedPipe(System.String,System.UInt32,System.IO.Pipes.PipeSecurity)">
            <summary>
            Helper method to create a PowerShell transport named pipe via native API, along
            with a returned .Net NamedPipeServerStream object wrapping the named pipe.
            </summary>
            <param name="pipeName">Named pipe core name.</param>
            <returns>An instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream"/> class.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods">
            <summary>
            Provides procedural methods to work with Internet connections. See the Remarks section.
            </summary>
            <remarks>Note: WinINet does not support server implementations. In addition, it should not be used from a service. For server implementations or services use Microsoft Windows HTTP Services (WinHTTP).</remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetOpen(System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags)">
            <summary>
            Initializes an application's use of the WinINet functions.
            </summary>
            <param name="lpszAgent">The name of the application or entity calling the WinINet functions. This name is used as the user agent in the HTTP protocol.</param>
            <param name="dwAccessType">Type of access required. This parameter can be one of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Direct"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Preconfig"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.PreconfigWithNoAutoProxy"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Proxy"/>.</param>
            <param name="dwFlags">Options. This parameter can be a combination of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Async"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.FromCache"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Offline"/>.</param>
            <returns>Returns a valid handle that the application passes to subsequent WinINet functions. If this method fails, it returns <see cref="F:System.IntPtr.Zero"/>. To retrieve a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetConnect(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)">
            <summary>
            Opens a File Transfer Protocol (FTP) or HTTP session for a given site.
            </summary>
            <param name="hInternet">Handle returned by a previous call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetOpen(System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags)"/>.</param>
            <param name="lpszServerName">The host name of an Internet server. Alternately, the string can contain the IP number of the site, in ASCII dotted-decimal format (for example, 11.0.1.45).</param>
            <param name="nServerPort">Transmission Control Protocol/Internet Protocol (TCP/IP) port on the server. These flags set only the port that is used. The service is set by the value of dwService.</param>
            <param name="lpszUserName">The name of the user to log on. If this parameter is NULL, the function uses an appropriate default. For the FTP protocol, the default is "anonymous".</param>
            <param name="lpszPassword">The password to use to log on. If both <paramref name="lpszPassword"/> and <paramref name="lpszUserName"/> are <see langword="null"/>, the function uses the default "anonymous" password. In the case of FTP, the default password is the user's email name. If <paramref name="lpszPassword"/> is <see langword="null"/>, but <paramref name="lpszUserName"/> is not <see langword="null"/>, the function uses a blank password.</param>
            <param name="dwService">Type of service to access.</param>
            <param name="dwFlags">Options specific to the service used. If <paramref name="dwService"/> is <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService.FTP"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Passive"/> causes the application to use passive FTP semantics.</param>
            <param name="dwContext">Pointer to a variable that contains an application-defined value that is used to identify the application context for the returned handle in callbacks.</param>
            <returns>Returns a valid handle to the session if the connection is successful, or <see cref="F:System.IntPtr.Zero"/> otherwise. To retrieve extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. An application can also use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetGetLastResponseInfo(System.IntPtr,System.IntPtr,System.UInt32@)"/> to determine why access to the service was denied.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)">
            <summary>
            Closes a single Internet handle. See the Remarks section.
            </summary>
            <param name="hInternet">Handle to be closed.</param>
            <returns>Returns <see langword="true"/> if the handle is successfully closed, or <see langword="false"/> otherwise. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>
            <para>The function terminates any pending operations on the handle and discards any outstanding data.</para>
            <para>It is safe to call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/> as long as no API calls are being made or will be made using the handle. Once an API has returned <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.IOPending"/>, it is safe to call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/> to cancel that I/O, as long as no subsequent API calls will be issued with the handle.</para>
            <para>It is safe to call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/> in a callback for the handle being closed. If there is a status callback registered for the handle being closed, and the handle was created with a non-<see langword="null"/> context value, an <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetStatus.HandleClosing"/> callback will be made. This indication will be the last callback made from a handle and indicates that the handle is being destroyed.</para>
            <para>If asynchronous requests are pending for the handle or any of its child handles, the handle cannot be closed immediately, but it will be invalidated. Any new requests attempted using the handle will return with an <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InvalidHandle"/> notification. The asynchronous requests will complete with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetStatus.RequestComplete"/>. Applications must be prepared to receive any <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetStatus.RequestComplete"/> indications on the handle before the final <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetStatus.HandleClosing"/> indication is made, which indicates that the handle is completely closed.</para>
            <para>An application can call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> to determine if requests are pending. If <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.IOPending"/>, there were outstanding requests when the handle was closed.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetFindNextFile(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@)">
            <summary>
            <para>This implementation is designed for FTP protocol ONLY. Documentation about the behavior this function has for Gopher protocol is here for information only.</para>
            <para>Continues a file search started as a result of a previous call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>.</para>
            <para><b>Windows XP and Windows Server 2003 R2 and earlier:</b> Or continues a file search as a result of a previous call to <see cref="!:GopherFindFirstFile"/>.</para>
            </summary>
            <param name="hFind"><para>Handle returned from either <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> or <see cref="!:InternetOpenUrl"/> (directories only).</para>
            <para><b>Windows XP and Windows Server 2003 R2 and earlier:</b> Also a handle returned from <see cref="!:GopherFindFirstFile"/>.</para></param>
            <param name="lpvFindData">Information about the file or directory.</param>
            <returns>Returns <see langword="true"/> if the function succeeds, or <see langword="false"/> otherwise. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. If the function finds no matching files, <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.NoMoreFiles"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetWriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Writes data to an open Internet file. See the Remarks section.
            </summary>
            <param name="hFile">Handle returned from a previous call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> or an handle sent by <see cref="!:HttpSendRequestEx"/>.</param>
            <param name="lpBuffer">A buffer that contains the data to be written to the file.</param>
            <param name="dwNumberOfBytesToWrite">Number of bytes to be written to the file.</param>
            <param name="lpdwNumberOfBytesWritten">A variable that receives the number of bytes written to the file.</param>
            <returns>Returns <see langword="true"/> if the function succeeds, or <see langword="false"/> otherwise. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. An application can also use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetGetLastResponseInfo(System.IntPtr,System.IntPtr,System.UInt32@)"/> when necessary.</returns>
            <remarks>When the application is sending data, it must call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/> to end the data transfer.</remarks>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort.InternetInvalidPortNumber">
            <summary>
            Uses the default port for the service specified by dwService.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort.DefaultFTPPort">
            <summary>
            Uses the default port for FTP servers (port 21).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort.DefaultGopherPort">
            <summary>
            <para>Uses the default port for Gopher servers (port 70).</para>
            <para>Note: Windows XP and Windows Server 2003 R2 and earlier only.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort.DefaultHTTPPort">
            <summary>
            Uses the default port for HTTP servers (port 80).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort.DefaultHTTPSPort">
            <summary>
            Uses the default port for Secure Hypertext Transfer Protocol (HTTPS) servers (port 443).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort.DefaultSocksPort">
            <summary>
            Uses the default port for SOCKS firewall servers (port 1080).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService.FTP">
            <summary>
            FTP service.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService.Gopher">
            <summary>
            <para>Gopher service.</para>
            <para>Note: Windows XP and Windows Server 2003 R2 and earlier only.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService.HTTP">
            <summary>
            HTTP service.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Reload">
            <summary>
            Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Resynchronize">
            <summary>
            <para>Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP resources are reloaded.</para>
            <para>Windows XP and Windows Server 2003 R2 and earlier: Gopher resources are also reloaded.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Hyperlink">
            <summary>
            Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.NeedFile">
            <summary>
            Causes a temporary file to be created if the file cannot be cached.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferASCII">
            <summary>
            Transfers the file as ASCII.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferBinary">
            <summary>
            Transfers the file as binary.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Preconfig">
            <summary>
            Retrieves the proxy or direct configuration from the registry.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Direct">
            <summary>
            Resolves all host names locally.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Proxy">
            <summary>
            Passes requests to the proxy unless a proxy bypass list is supplied and the name to be resolved bypasses the proxy. In this case, the function uses <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.Direct"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetOpenType.PreconfigWithNoAutoProxy">
            <summary>
            Retrieves the proxy or direct configuration from the registry and prevents the use of a startup Microsoft JScript or Internet Setup (INS) file.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetStatus">
            <summary>
            Status manifests for Internet status callback.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII">
            <summary>
            Transfers the file using the FTP ASCII (Type A) transfer method. Control and formatting data is converted to local equivalents.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Binary">
            <summary>
            Transfers the file using the FTP Image (Type I) transfer method. The file is transferred exactly with no changes. This is the default transfer method.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods">
            <summary>
            Provides procedural methods to work with FTP connections. See the Remarks section.
            </summary>
            <remarks>Note: WinINet does not support server implementations. In addition, it should not be used from a service. For server implementations or services use Microsoft Windows HTTP Services (WinHTTP).</remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetCurrentDirectory(System.IntPtr,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Retrieves the current directory for the specified FTP session. See Remarks section.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszCurrentDirectory">Pointer to a null-terminated string that receives the absolute path of the current directory.</param>
            <param name="lpdwCurrentDirectory">A variable that specifies the length of the buffer, in TCHARs. The buffer length must include room for a terminating null character. Using a length of <see cref="F:Microsoft.WindowsAPICodePack.NativeAPI.Consts.Shell.MaxPath"/> is sufficient for all paths. When the function returns, the variable receives the number of characters copied into the buffer.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>If the <paramref name="lpszCurrentDirectory"/> buffer is not large enough, <paramref name="lpdwCurrentDirectory"/> receives the number of bytes required to retrieve the full, current directory name.</remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpSetCurrentDirectory(System.IntPtr,System.String)">
            <summary>
            Changes to a different working directory on the FTP server.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszDirectory">Pointer to a null-terminated string that contains the name of the directory to become the current working directory. This can be either a fully qualified path or a name relative to the current directory.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. If the error message indicates that the FTP server denied the request to change a directory, use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetGetLastResponseInfo(System.IntPtr,System.IntPtr,System.UInt32@)"/> to determine why.</returns>
            <remarks>
            <para>An application should use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetCurrentDirectory(System.IntPtr,System.Text.StringBuilder,System.UInt32@)"/> to determine the remote site's current working directory, instead of assuming that the remote system uses a hierarchical naming scheme for directories.</para>
            <para>The <paramref name="lpszDirectory"/> parameter can be either partially or fully qualified file names relative to the current directory.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)">
            <summary>
            Searches the specified directory of the given FTP session. File and directory entries are returned to the application in the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData"/> structure. See the Remarks section.
            </summary>
            <param name="hConnect">Handle to an FTP session returned from <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetConnect(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>.</param>
            <param name="lpszSearchFile">A valid directory path or file name for the FTP server's file system. The string can contain wildcards, but no blank spaces are allowed. If the value of <paramref name="lpszSearchFile"/> is <see langword="null"/> or if it is an empty string, the function finds the first file in the current directory on the server.</param>
            <param name="lpFindFileData">Information about the found file or directory.</param>
            <param name="dwFlags">Controls the behavior of this function. This parameter can be a combination of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Hyperlink"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.NeedFile"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.NoCacheWrite"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Reload"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Resynchronize"/>.</param>
            <param name="dwContext">Pointer to a variable that specifies the application-defined value that associates this search with any application data. This parameter is used only if the application has already called <see cref="!:InternetSetStatusCallback"/> to set up a status callback function.</param>
            <returns>Returns a valid handle for the request if the directory enumeration was started successfully, or returns <see cref="F:System.IntPtr.Zero"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. If <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> returns <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InternetExtendedError"/>, as in the case where the function finds no matching files, call the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetGetLastResponseInfo(System.IntPtr,System.IntPtr,System.UInt32@)"/> function to retrieve the extended error text, as documented in <see href="https://docs.microsoft.com/en-us/windows/desktop/WinInet/appendix-c-handling-errors">Handling Errors</see>.</returns>
            <remarks>
            <para>For <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>, file times returned in the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData"/> structure are in the local time zone, not in a coordinated universal time (UTC) format.</para>
            <para><see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> is similar to the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.DataAccessAndStorage.NativeMethods.FindFirstFile(System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@)"/> function. Note, however, that only one <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> can occur at a time within a given FTP session. The enumerations, therefore, are correlated with the FTP session handle. This is because the FTP protocol allows only a single directory enumeration per session.</para>
            <para>After calling <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> and until calling <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/>, the application cannot call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> again on the given FTP session handle. If a call is made to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> on that handle, the function fails with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.FTPTransferInProgress"/>. After the calling application has finished using the handle returned by <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>, it must be closed using the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/> function.</para>
            <para>After beginning a directory enumeration with <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>, the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetFindNextFile(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@)"/> function can be used to continue the enumeration.</para>
            <para>Because the FTP protocol provides no standard means of enumerating, some of the common information about files, such as file creation date and time, is not always available or correct. When this happens, <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> and <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetFindNextFile(System.IntPtr,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@)"/> fill in unavailable information with a best guess based on available information. For example, creation and last access dates are often the same as the file's modification date.</para>
            <para>The application cannot call <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpFindFirstFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.Win32FindData@,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> between calls to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> and <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpCreateDirectory(System.IntPtr,System.String)">
            <summary>
            Creates a new directory on the FTP server. See the Remarks section.
            </summary>
            <param name="hConnect">Handle returned by a previous call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetConnect(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> using <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService.FTP"/>.</param>
            <param name="lpszDirectory">The name of the directory to be created. This can be either a fully qualified path or a name relative to the current directory.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. If the error message indicates that the FTP server denied the request to create a directory, use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetGetLastResponseInfo(System.IntPtr,System.IntPtr,System.UInt32@)"/> to determine why.</returns>
            <remarks>
            <para>An application should use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetCurrentDirectory(System.IntPtr,System.Text.StringBuilder,System.UInt32@)"/> to determine the remote site's current working directory instead of assuming that the remote system uses a hierarchical naming scheme for directories.</para>
            <para>The <paramref name="lpszDirectory"/> parameter can be either partially or fully qualified file names relative to the current directory.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpRemoveDirectory(System.IntPtr,System.String)">
            <summary>
            Removes the specified directory on the FTP server. The remarks are the same that for <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpCreateDirectory(System.IntPtr,System.String)"/>.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszDirectory">The name of the directory to be removed. This can be either a fully qualified path or a name relative to the current directory.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. If the error message indicates that the FTP server denied the request to remove a directory, use <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetGetLastResponseInfo(System.IntPtr,System.IntPtr,System.UInt32@)"/> to determine why.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpDeleteFile(System.IntPtr,System.String)">
            <summary>
            Deletes a file stored on the FTP server. See the Remarks section.
            </summary>
            <param name="hConnect">Handle returned by a previous call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetConnect(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> using <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService.FTP"/>.</param>
            <param name="lpszFileName">The name of the file to be deleted.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>The <paramref name="lpszFileName"/> parameter can be either partially or fully qualified file names relative to the current directory.</remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpCommand(System.IntPtr,System.Boolean,Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType,System.String,System.UIntPtr,System.IntPtr@)">
            <summary>
            Sends commands directly to an FTP server. See the Remarks section.
            </summary>
            <param name="hConnect">A handle returned from a call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetConnect(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetPort,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetService,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>.</param>
            <param name="fExpectResponse">A <see cref="T:System.Boolean"/> value that indicates whether the application expects a data connection to be established by the FTP server. This must be set to <see langword="true"/> if a data connection is expected, or <see langword="false"/> otherwise.</param>
            <param name="dwFlags">A parameter that can be set to one of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Binary"/>.</param>
            <param name="lpszCommand">The command to send to the FTP server.</param>
            <param name="dwContext">A pointer to a variable that contains an application-defined value used to identify the application context in callback operations.</param>
            <param name="phFtpCommand">A pointer to a handle that is created if a valid data socket is opened. The <paramref name="fExpectResponse"/> parameter must be set to <see langword="true"/> for <paramref name="phFtpCommand"/> to be filled.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks><see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> can return <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InternetNoDirectAccess"/> if the client application is offline. If one or more of the parameters are invalid, <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> will return <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.InvalidParameter"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetFile(System.IntPtr,System.String,System.String,System.Boolean,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)">
            <summary>
            Retrieves a file from the FTP server and stores it under the specified file name, creating a new local file in the process.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszRemoteFile">The name of the file to be retrieved.</param>
            <param name="lpszNewFile">The name of the file to be created on the local system.</param>
            <param name="fFailIfExists">Indicates whether the function should proceed if a local file of the specified name already exists. If <paramref name="fFailIfExists"/> is <see langword="true"/> and the local file exists, <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetFile(System.IntPtr,System.String,System.String,System.Boolean,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> fails.</param>
            <param name="dwFlagsAndAttributes">File attributes for the new file. This parameter can be any combination of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes"/> flags used by the <see cref="!:CreateFile"/> function.</param>
            <param name="dwFlags"><para>Controls how the function will handle the file download. The first set of flag values indicates the conditions under which the transfer occurs. These transfer type flags can be used in combination with the second set of flags that control caching.</para>
            <para>The application can select one of these transfer type values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Binary"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Unknown"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferBinary"/>.</para>
            <para>The following flags determine how the caching of this file will be done. Any combination of the following flags can be used with the transfer type flag: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Hyperlink"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.NeedFile"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Reload"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Resynchronize"/>.</para></param>
            <param name="dwContext">Pointer to a variable that contains the application-defined value that associates this search with any application data. This is used only if the application has already called <see cref="!:InternetSetStatusCallback"/> to set up a status callback function.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>
            <para><see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetFile(System.IntPtr,System.String,System.String,System.Boolean,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAttributes,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> is a high-level routine that handles all the bookkeeping and overhead associated with reading a file from an FTP server and storing it locally. An application that needs to retrieve file data only or that requires close control over the file transfer should use the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> and <see cref="!:InternetReadFile"/> functions.</para>
            <para>If the <paramref name="dwFlags"/> parameter specifies <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII"/>, translation of the file data converts control and formatting characters to local equivalents. The default transfer is binary mode, where the file is downloaded in the same format as it is stored on the server.</para>
            <para>Both <paramref name="lpszRemoteFile"/> and <paramref name="lpszNewFile"/> can be either partially or fully qualified file names relative to the current directory.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpGetFileSize(System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves the file size of the requested FTP resource.
            </summary>
            <param name="hFile">Handle returned from a call to <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>.</param>
            <param name="lpdwFileSizeHigh">Pointer to the high-order unsigned long integer of the file size of the requested FTP resource.</param>
            <returns>Returns the low-order unsigned long integer of the file size of the requested FTP resource.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)">
            <summary>
            Initiates access to a remote file on an FTP server for reading or writing. See the Remarks section.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszFileName">Pointer to a null-terminated string that contains the name of the file to be accessed.</param>
            <param name="dwAccess">File access. This parameter can be <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess.Read"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess.Write"/>, but not both.</param>
            <param name="dwFlags">
            <para>Conditions under which the transfers occur. The application should select one transfer type and any of the flags that indicate how the caching of the file will be controlled.</para>
            <para>The transfer type can be one of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Binary"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Unknown"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferBinary"/>.</para>
            <para>The following values are used to control the caching of the file. The application can use one or more of these values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Hyperlink"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.NeedFile"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Reload"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Resynchronize"/>.</para>
            </param>
            <param name="dwContext">Pointer to a variable that contains the application-defined value that associates this search with any application data. This is only used if the application has already called <see cref="!:InternetSetStatusCallback"/> to set up a status callback function.</param>
            <returns>Returns a handle if successful, or <see langword="null"/> otherwise. To retrieve a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>
            <para>After calling <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> and until calling <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/>, all other calls to FTP functions on the same FTP session handle will fail and set the error message to <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode.FTPTransferInProgress"/>. After the calling application has finished using the handle returned by <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/>, it must be closed using the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetCloseHandle(System.IntPtr)"/> function.</para>
            <para>Only one file can be open in a single FTP session. Therefore, no file handle is returned and the application simply uses the FTP session handle when necessary.</para>
            <para>The <paramref name="lpszFileName"/> parameter can be either a partially or fully qualified file name relative to the current directory.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpPutFile(System.IntPtr,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)">
            <summary>
            Stores a file on the FTP server. See the Remarks section.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszLocalFile">Pointer to a null-terminated string that contains the name of the file to be sent from the local system.</param>
            <param name="lpszNewRemoteFile">Pointer to a null-terminated string that contains the name of the file to be created on the remote system.</param>
            <param name="dwFlags">
            <para>Conditions under which the transfers occur. The application should select one transfer type and any of the flags that control how the caching of the file will be controlled.</para>
            <para>The transfer type can be any one of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Binary"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.Unknown"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferASCII"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.TransferBinary"/>.</para>
            <para>The following values are used to control the caching of the file. The application can use one or more of the following values: <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Hyperlink"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.NeedFile"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Reload"/>, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags.Resynchronize"/>.</para>
            </param>
            <param name="dwContext">Pointer to a variable that contains the application-defined value that associates this search with any application data. This parameter is used only if the application has already called <see cref="!:InternetSetStatusCallback"/> to set up a status callback.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>
            <para><see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpPutFile(System.IntPtr,System.String,System.String,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> is a high-level routine that handles all the bookkeeping and overhead associated with reading a file locally and storing it on an FTP server. An application that needs to send file data only, or that requires close control over the file transfer, should use the <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpOpenFile(System.IntPtr,System.String,Microsoft.WindowsAPICodePack.Win32Native.Shell.FileAccess,Microsoft.WindowsAPICodePack.Win32Native.Net.InternetFlags,System.UIntPtr)"/> and <see cref="M:Microsoft.WindowsAPICodePack.Win32Native.Net.NativeMethods.InternetWriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@)"/> functions.</para>
            <para>If the <paramref name="dwFlags"/> parameter specifies <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.TransferType.ASCII"/>, translation of the file data converts control and formatting characters to local equivalents.</para>
            <para>Both <paramref name="lpszNewRemoteFile"/> and <paramref name="lpszLocalFile"/> can be either partially or fully qualified file names relative to the current directory.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Net.FTP.NativeMethods.FtpRenameFile(System.IntPtr,System.String,System.String)">
            <summary>
            Renames a file stored on the FTP server. See the Remarks section.
            </summary>
            <param name="hConnect">Handle to an FTP session.</param>
            <param name="lpszExisting">The name of the file to be renamed.</param>
            <param name="lpszNew">The new name for the remote file.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise. To get a specific error message, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>The <paramref name="lpszExisting"/> and <paramref name="lpszNew"/> parameters can be either partially or fully qualified file names relative to the current directory.</remarks>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryCallback">
            <summary>
            The <see cref="T:System.Delegate"/> that represents the callback method invoked
            by the system when an application has registered for 
            application recovery. 
            </summary>
            <param name="state">An application-defined state object that is passed to the callback method.</param>
            <remarks>The callback method will be invoked
            prior to the application being terminated by Windows Error Reporting (WER). To keep WER from terminating the application before 
            the callback method completes, the callback method must
            periodically call the <see cref="!:ApplicationRecoveryInProgress"/> method. </remarks>
            <seealso cref="!:RegisterForApplicationRecovery(RecoverySettings)"/>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryData">
            <summary>
            Defines a class that contains a callback delegate and properties of the application
            as defined by the user.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryData.#ctor(Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryCallback,System.Object)">
            <summary>
            Initializes a recovery data wrapper with a callback method and the current
            state of the application.
            </summary>
            <param name="callback">The callback delegate.</param>
            <param name="state">The current state of the application.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryData.Callback">
            <summary>
            Gets or sets a value that determines the recovery callback function.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryData.State">
            <summary>
            Gets or sets a value that determines the application state.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RecoveryData.Invoke">
            <summary>
            Invokes the recovery callback function.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RestartRestrictions">
            <summary>
            Specifies the conditions when Windows Error Reporting
            should not restart an application that has registered
            for automatic restart.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RestartRestrictions.None">
            <summary>
            Always restart the application.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RestartRestrictions.NotOnCrash">
            <summary>
            Do not restart when the application has crashed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RestartRestrictions.NotOnHang">
            <summary>
            Do not restart when the application is hung.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RestartRestrictions.NotOnPatch">
            <summary>
            Do not restart when the application is terminated
            due to a system update.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.RestartRestrictions.NotOnReboot">
            <summary>
            Do not restart when the application is terminated 
            because of a system reboot.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.ApplicationServices.PowerManagementNativeMethods.PowerGetActiveScheme(System.IntPtr,System.Guid@)">
            <summary>
            Gets the Guid relating to the currently active power scheme.
            </summary>
            <param name="rootPowerKey">Reserved for future use, this must be set to IntPtr.Zero</param>
            <param name="activePolicy">Returns a Guid referring to the currently active power scheme.</param>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats">
            <summary>
            The clipboard formats defined by the system.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Bitmap">
            <summary>
            A handle to a bitmap (HBITMAP).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Dib">
            <summary>
            A memory object containing a BITMAPINFO structure followed by the bitmap bits.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.DibV5">
            <summary>
            A memory object containing a BITMAPV5HEADER structure followed by the bitmap color space information and the bitmap bits.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Dif">
            <summary>
            Software Arts' Data Interchange Format.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.DSBitmap">
            <summary>
            Bitmap display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in bitmap format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.DSPEnhMetaFile">
            <summary>
            Enhanced metafile display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in enhanced metafile format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.DSPMetaFilePicture">
            <summary>
            Metafile-picture display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in metafile-picture format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.DSPText">
            <summary>
            Text display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in text format in lieu of the privately formatted data.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.EnhMetaFile">
            <summary>
            A handle to an enhanced metafile (HENHMETAFILE).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.GDIObjFirst">
            <summary>
            Start of a range of integer values for application-defined GDI object clipboard formats. The end of the range is <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.GDIObjLast"/>.
            Handles associated with clipboard formats in this range are not automatically deleted using the GlobalFree function when the clipboard is emptied. Also, when using values in this range, the hMem parameter is not a handle to a GDI object, but is a handle allocated by the GlobalAlloc function with the GMEM_MOVEABLE flag.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.GDIObjLast">
            <summary>
            See <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.GDIObjFirst"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.HDrop">
            <summary>
            A handle to type HDROP that identifies a list of files. An application can retrieve information about the files by passing the handle to the DragQueryFile function.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Locale">
            <summary>
            The data is a handle to the locale identifier associated with text in the clipboard. When you close the clipboard, if it contains <see cref="!:CF_TEXT"/> data but no Locale data, the system automatically sets the Locale format to the current input language. You can use the Locale format to associate a different locale with the clipboard text.
            An application that pastes text from the clipboard can retrieve this format to determine which character set was used to generate the text.
            Note that the clipboard does not support plain text in multiple character sets. To achieve this, use a formatted text data type such as RTF instead.
            The system uses the code page associated with Locale to implicitly convert from <see cref="!:CF_TEXT"/> to <see cref="!:CF_UNICODETEXT"/>. Therefore, the correct code page table is used for the conversion.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.MetaFilePicture">
            <summary>
            Handle to a metafile picture format as defined by the MetaFilePicture structure. When passing a MetaFilePicture handle by means of DDE, the application responsible for deleting hMem should also free the metafile referred to by the MetaFilePicture handle.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.OEMText">
            <summary>
            Text format containing characters in the OEM character set. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.OwnerDisplay">
            <summary>
            Owner-display format. The clipboard owner must display and update the clipboard viewer window, and receive the WM_ASKCBFORMATNAME, WM_HSCROLLCLIPBOARD, WM_PAINTCLIPBOARD, WM_SIZECLIPBOARD, and WM_VSCROLLCLIPBOARD messages. The hMem parameter must be NULL.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Palette">
            <summary>
            Handle to a color palette. Whenever an application places data in the clipboard that depends on or assumes a color palette, it should place the palette on the clipboard as well.
            If the clipboard contains data in the Palette (logical color palette) format, the application should use the SelectPalette and RealizePalette functions to realize (compare) any other data in the clipboard against that logical palette.
            When displaying clipboard data, the clipboard always uses as its current palette any object on the clipboard that is in the Palette format.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.PenData">
            <summary>
            Data for the pen extensions to the Microsoft Windows for Pen Computing.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.PrivateFirst">
            <summary>
            Start of a range of integer values for private clipboard formats.The range ends with <see cref="!:CF_PRIVATELAST"/>. Handles associated with private clipboard formats are not freed automatically; the clipboard owner must free such handles, typically in response to the WM_DESTROYCLIPBOARD message.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.PrivateLast">
            <summary>
            See <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.PrivateFirst"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.RIFF">
            <summary>
            Represents audio data more complex than can be represented in a <see cref="!:CF_WAVE"/> standard wave format.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.SYLK">
            <summary>
            Microsoft Symbolic Link (SYLK) format.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Text">
            <summary>
            Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.Use this format for ANSI text.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.TIFF">
            <summary>
            Tagged-image file format.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.UnicodeText">
            <summary>
            Unicode text format.Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.StandardClipboardFormats.Wave">
            <summary>
            Represents audio data in one of the standard wave formats, such as 11 kHz or 22 kHz PCM.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper">
            <summary>
            Provide Error Message Helper Methods.
            This is intended for unmanaged code use only.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Ignored">
            <summary>
            <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.HResult.Ok"/> value.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.HResultFromWin32(System.Int32@)">
            <summary>
            Returns an HRESULT from a given Win32 error code.
            </summary>
            <param name="win32ErrorCode">The Windows API error code.</param>
            <returns>The equivalent HRESULT.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.HResultFromWin32(Microsoft.WindowsAPICodePack.Win32Native.ErrorCode@)">
            <summary>
            Returns an <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.HResult"/> from a given <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode"/>.
            </summary>
            <param name="win32ErrorCode">The Windows API error code.</param>
            <returns>The equivalent <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.HResult"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Succeeded(System.Int32@)">
            <summary>
            Determines whether a given error code indicates success.
            </summary>
            <param name="result">The error code.</param>
            <returns><see langword="true"/> if the error code indicates success; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Succeeded(Microsoft.WindowsAPICodePack.Win32Native.ErrorCode@)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode"/> indicates success.
            </summary>
            <param name="result">The error code.</param>
            <returns><see langword="true"/> if the error code indicates success; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Succeeded(Microsoft.WindowsAPICodePack.Win32Native.HResult@)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.HResult"/> indicates success.
            </summary>
            <param name="result">The error code.</param>
            <returns><see langword="true"/> if the error code indicates success; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Failed(Microsoft.WindowsAPICodePack.Win32Native.HResult@)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.HResult"/> indicates failure.
            </summary>
            <param name="result">The error code.</param>
            <returns><see langword="true"/> if the error code indicates failure; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Failed(System.Int32@)">
            <summary>
            Determines whether a given error code indicates failure.
            </summary>
            <param name="result">The error code.</param>
            <returns><see langword="true"/> if the error code indicates failure; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Matches(System.Int32@,System.Int32@)">
            <summary>
            Determines whether a given HRESULT corresponds to a given Win32 error code.
            </summary>
            <param name="result">The COM error code.</param>
            <param name="win32ErrorCode">The Win32 error code.</param>
            <returns><see langword="true"/> if <paramref name="result"/> corresponds to <paramref name="win32ErrorCode"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreErrorHelper.Matches(Microsoft.WindowsAPICodePack.Win32Native.HResult@,Microsoft.WindowsAPICodePack.Win32Native.ErrorCode@)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.HResult"/> corresponds to a given <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.ErrorCode"/>.
            </summary>
            <param name="result">The COM error code.</param>
            <param name="win32ErrorCode">The Win32 error code.</param>
            <returns><see langword="true"/> if <paramref name="result"/> corresponds to <paramref name="win32ErrorCode"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers">
            <summary>
            Common Helper methods
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.RunningOnXP">
            <summary>
            Determines if the application is running on XP
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.ThrowIfNotXP">
            <summary>
            Throws PlatformNotSupportedException if the application is not running on Windows XP
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.RunningOnVista">
            <summary>
            Determines if the application is running on Vista
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.ThrowIfNotVista">
            <summary>
            Throws PlatformNotSupportedException if the application is not running on Windows Vista
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.RunningOnWin7">
            <summary>
            Determines if the application is running on Windows 7
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.ThrowIfNotWin7">
            <summary>
            Throws PlatformNotSupportedException if the application is not running on Windows 7
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.RunningOnWin8">
            <summary>
            Determines if the application is running on Windows 8
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.ThrowIfNotWin8">
            <summary>
            Throws PlatformNotSupportedException if the application is not running on Windows 8
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.RunningOnWin8_1">
            <summary>
            Determines if the application is running on Windows 8.1
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.ThrowIfNotWin8_1">
            <summary>
            Throws PlatformNotSupportedException if the application is not running on Windows 8.1
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.RunningOnWin10">
            <summary>
            Determines if the application is running on Windows 10
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.ThrowIfNotWin10">
            <summary>
            Throws PlatformNotSupportedException if the application is not running on Windows 10
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.CoreHelpers.GetStringResource(System.String)">
            <summary>
            Get a string resource given a resource Id
            </summary>
            <param name="resourceId">The resource Id</param>
            <returns>The string resource corresponding to the given resource Id. Returns null if the resource id
            is invalid or the string cannot be retrieved for any other reason.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Core">
            <summary>
            <para>Wrappers for Native Methods and Structs.</para>
            <para>This type is intended for unmanaged use only.</para>
            </summary>    
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.GetCurrentThreadId">
            <summary>
            Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>The thread identifier of the calling thread.</returns>
            <remarks>Until the thread terminates, the thread identifier uniquely identifies the thread throughout the system.</remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.PostMessage(System.IntPtr,Microsoft.WindowsAPICodePack.WindowMessage,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created
            the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="windowHandle">Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
            but the message is not sent to child windows.
            </param>
            <param name="message">Specifies the message to be sent.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>A return code specific to the message being sent.</returns>     
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.SendMessage(System.IntPtr,Microsoft.WindowsAPICodePack.WindowMessage,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls 
            the window procedure for the specified window and does not return until the window 
            procedure has processed the message. 
            </summary>
            <param name="windowHandle">Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
            but the message is not sent to child windows.
            </param>
            <param name="message">Specifies the message to be sent.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>A return code specific to the message being sent.</returns>     
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls 
            the window procedure for the specified window and does not return until the window 
            procedure has processed the message. 
            </summary>
            <param name="windowHandle">Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
            but the message is not sent to child windows.
            </param>
            <param name="message">Specifies the message to be sent.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>A return code specific to the message being sent.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.String)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls 
            the window procedure for the specified window and does not return until the window 
            procedure has processed the message. 
            </summary>
            <param name="windowHandle">Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
            but the message is not sent to child windows.
            </param>
            <param name="message">Specifies the message to be sent.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>A return code specific to the message being sent.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.String)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls 
            the window procedure for the specified window and does not return until the window 
            procedure has processed the message. 
            </summary>
            <param name="windowHandle">Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
            but the message is not sent to child windows.
            </param>
            <param name="message">Specifies the message to be sent.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>A return code specific to the message being sent.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.SendMessage(System.IntPtr,System.UInt32,System.Int32@,System.Text.StringBuilder)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls 
            the window procedure for the specified window and does not return until the window 
            procedure has processed the message. 
            </summary>
            <param name="windowHandle">Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
            but the message is not sent to child windows.
            </param>
            <param name="message">Specifies the message to be sent.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>A return code specific to the message being sent.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">Handle to the icon to be destroyed. The icon must not be in use. </param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.GetHiWord(System.Int64,System.Int32)">
            <summary>
            Gets the HiWord
            </summary>
            <param name="value">The value to get the hi word from.</param>
            <param name="size">Size</param>
            <returns>The upper half of the dword.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.Core.GetLoWord(System.Int64)">
            <summary>
            Gets the LoWord
            </summary>
            <param name="value">The value to get the low word from.</param>
            <returns>The lower half of the dword.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.ExecutionStates">
            <summary>
            Enumeration of execution states.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ExecutionStates.None">
            <summary>
            No state configured.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ExecutionStates.SystemRequired">
            <summary>
            Forces the system to be in the working state by resetting the system idle timer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ExecutionStates.DisplayRequired">
            <summary>
            Forces the display to be on by resetting the display idle timer.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ExecutionStates.AwayModeRequired">
            <summary>
            Enables away mode. This value must be specified with ES_CONTINUOUS.
            Away mode should be used only by media-recording and media-distribution applications that must perform critical background processing on desktop computers while the computer appears to be sleeping. See Remarks.
            
            Windows Server 2003 and Windows XP/2000:  ES_AWAYMODE_REQUIRED is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.ExecutionStates.Continuous">
            <summary>
            Informs the system that the state being set should remain in effect until the next call that uses ES_CONTINUOUS and one of the other state flags is cleared.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.SecurityImpersonationLevel">
            <summary>
            Impersonation level is represented by a pair of bits in Windows.
            If a new impersonation level is added or lowest value is changed from
            0 to something else, fix the Windows CreateFile call.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.GenericRights">
            <summary>
            The generic rights.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant">
            <summary>
            Represents the OLE struct PROPVARIANT.
            This class is intended for managed reimplementations only.
            </summary>
            <remarks>
            Originally sourced from http://blogs.msdn.com/adamroot/pages/interop-with-propvariants-in-net.aspx
            and modified to support additional types including vectors and ability to set values
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.FromObject(System.Object)">
            <summary>
            Attempts to create a PropVariant by finding an appropriate constructor.
            </summary>
            <param name="value">Object from which PropVariant should be created.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor">
            <summary>
            Default constrcutor
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.String)">
            <summary>
            Set a <see cref="T:System.String"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.String[])">
            <summary>
            Set a <see cref="T:System.String"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Boolean[])">
            <summary>
            Set a <see cref="T:System.Boolean"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Int16[])">
            <summary>
            Set a <see cref="T:System.Int16"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.UInt16[])">
            <summary>
            Set a <see cref="T:System.UInt16"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Int32[])">
            <summary>
            Set an <see cref="T:System.Int32"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.UInt32[])">
            <summary>
            Set a <see cref="T:System.UInt32"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Int64[])">
            <summary>
            Set a <see cref="T:System.Int64"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.UInt64[])">
            <summary>
            Set a <see cref="T:System.UInt64"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Double[])">
            <summary>>
            Set a <see cref="T:System.Double"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.DateTime[])">
            <summary>
            Set a <see cref="T:System.DateTime"/> vector
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Boolean)">
            <summary>
            Set a <see cref="T:System.Boolean"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.DateTime)">
            <summary>
            Set a <see cref="T:System.DateTime"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Byte)">
            <summary>
            Set a <see cref="T:System.Byte"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.SByte)">
            <summary>
            Set a <see cref="T:System.SByte"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Int16)">
            <summary>
            Set a <see cref="T:System.Int16"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.UInt16)">
            <summary>
            Set a <see cref="T:System.UInt16"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Int32)">
            <summary>
            Set an <see cref="T:System.Int32"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.UInt32)">
            <summary>
            Set a <see cref="T:System.UInt32"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Decimal)">
            <summary>
            Set a <see cref="T:System.Decimal"/> value
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Decimal[])">
            <summary>
            Create a <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant"/> with a contained <see cref="T:System.Decimal"/> array.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> array to wrap.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Single)">
            <summary>
            Create a <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant"/> containing a <see cref="T:System.Single"/> value.
            </summary>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Single[])">
            <summary>
            Creates a <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant"/> containing a <see cref="T:System.Single"/> array.
            </summary>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Int64)">
            <summary>
            Set a <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.UInt64)">
            <summary>
            Set a <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.#ctor(System.Double)">
            <summary>
            Set a <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.SetIUnknown(System.Object)">
            <summary>
            Set an IUnknown value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.SetSafeArray(System.Array)">
            <summary>
            Set a safe array value
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.VarType">
            <summary>
            Gets or sets the variant type.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.IsNullOrEmpty">
            <summary>
            Checks if this has an empty or null value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.Value">
            <summary>
            Gets the variant value.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.Dispose">
            <summary>
            Disposes the object, calls the clear function.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Win32Native.PropertySystem.PropVariant.ToString">
            <summary>
            Provides an simple string representation of the contained data and type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM">
            <summary>
            <para>The <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> constants are flags that indicate conditions for creating and deleting the object and access modes for the object. The <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> constants are included in the IStorage, System.Runtime.InteropServices.ComTypes.IStream, and IPropertySetStorage interfaces and in the StgCreateDocfile, StgCreateStorageEx, StgCreateDocfileOnILockBytes, StgOpenStorage, and StgOpenStorageEx functions.</para>
            <para>These elements are often combined using an OR operator. They are interpreted in groups as listed in this class. It is not valid to use more than one element from a single group.</para>
            <para>Use a flag from the creation group when creating an object, such as with StgCreateStorageEx or IStorage::CreateStream.</para>
            <para>For more information about transactioning, see the Remarks section of the following web page: https://docs.microsoft.com/en-us/windows/win32/stg/stgm-constants</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Read">
            <summary>
            Indicates that the object is read-only, meaning that modifications cannot be made. For example, if a stream object is opened with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Read"/>, the System.Runtime.InteropServices.ComTypes.ISequentialStream::Read method may be called, but the System.Runtime.InteropServices.ComTypes.ISequentialStream::Write method may not. Similarly, if a storage object opened with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Read"/>, the IStorage::OpenStream and IStorage::OpenStorage methods may be called, but the IStorage::CreateStream and IStorage::CreateStorage methods may not.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Write">
            <summary>
            Enables you to save changes to the object, but does not permit access to its data. The provided implementations of the IPropertyStorage and IPropertySetStorage interfaces do not support this write-only mode.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.ReadWrite">
            <summary>
            Enables access and modification of object data. For example, if a stream object is created or opened in this mode, it is possible to call both System.Runtime.InteropServices.ComTypes.IStream::Read and System.Runtime.InteropServices.ComTypes.IStream::Write. Be aware that this constant is not a simple binary OR operation of the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Write"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Read"/> elements.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyNone">
            <summary>
            Specifies that subsequent openings of the object are not denied read or write access. If no flag from the sharing group is specified, this flag is assumed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyRead">
            <summary>
            Prevents others from subsequently opening the object in <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Read"/> mode. It is typically used on a root storage object.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyWrite">
            <summary>
            Prevents others from subsequently opening the object for <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Write"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.ReadWrite"/> access. In transacted mode, sharing of <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyWrite"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareExclusive"/> can significantly improve performance because they do not require snapshots. For more information about transactioning, see the Remarks section of the web page referenced in the description of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareExclusive">
            <summary>
            Prevents others from subsequently opening the object in any mode. Be aware that this value is not a simple bitwise OR operation of the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyRead"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyWrite"/> values. In transacted mode, sharing of <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyWrite"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareExclusive"/> can significantly improve performance because they do not require snapshots. For more information about transactioning, see the Remarks section of the web page referenced in the description of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.Priority">
            <summary>
            Opens the storage object with exclusive access to the most recently committed version. Thus, other users cannot commit changes to the object while you have it open in priority mode. You gain performance benefits for copy operations, but you prevent others from committing changes. Limit the time that objects are open in priority mode. You must specify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Direct"/> and <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Access.Read"/> with priority mode, and you cannot specify <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.DeleteOnRelease"/>. <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.DeleteOnRelease"/> is only valid when creating a root object, such as with StgCreateStorageEx. It is not valid when opening an existing root object, such as with StgOpenStorageEx. It is also not valid when creating or opening a subelement, such as with IStorage::OpenStorage.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Creation.Create">
            <summary>
            <para>Indicates that an existing storage object or stream should be removed before the new object replaces it. A new object is created when this flag is specified only if the existing object has been successfully removed.</para>
            <para>This flag is used when attempting to create:</para>
            <para>- A storage object on a disk, but a file of that name exists.</para>
            <para>- An object inside a storage object, but an object with the specified name exists.</para>
            <para>- A byte array object, but one with the specified name exists.</para>
            <para>This flag cannot be used with open operations, such as StgOpenStorageEx or IStorage::OpenStream.</para>
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Creation.Convert">
            <summary>
            Creates the new object while preserving existing data in a stream named "Contents". In the case of a storage object or a byte array, the old data is formatted into a stream regardless of whether the existing file or byte array currently contains a layered storage object. This flag can only be used when creating a root storage object. It cannot be used within a storage object; for example, in IStorage::CreateStream. It is also not valid to use this flag and the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.DeleteOnRelease"/> flag simultaneously.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Creation.FailIfThere">
            <summary>
            Causes the create operation to fail if an existing object with the specified name exists. In this case, STG_E_FILEALREADYEXISTS is returned. This is the default creation mode; that is, if no other create flag is specified, <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Creation.FailIfThere"/> is implied.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Direct">
            <summary>
            Indicates that, in direct mode, each change to a storage or stream element is written as it occurs. This is the default if neither <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Direct"/> nor <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Transacted"/> is specified.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Transacted">
            <summary>
            Indicates that, in transacted mode, changes are buffered and written only if an explicit commit operation is called. To ignore the changes, call the Revert method in the System.Runtime.InteropServices.ComTypes.IStream, IStorage, or IPropertyStorage interface. The COM compound file implementation of IStorage does not support transacted streams, which means that streams can be opened only in direct mode, and you cannot revert changes to them, however transacted storages are supported. The compound file, stand-alone, and NTFS file system implementations of IPropertySetStorage similarly do not support transacted, simple property sets because these property sets are stored in streams. However, transactioning of nonsimple property sets, which can be created by specifying the PROPSETFLAG_NONSIMPLE flag in the grfFlags parameter of IPropertySetStorage::Create, are supported.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoScratch">
            <summary>
            Indicates that, in transacted mode, a temporary scratch file is usually used to save modifications until the Commit method is called. Specifying <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoScratch"/> permits the unused portion of the original file to be used as work space instead of creating a new file for that purpose. This does not affect the data in the original file, and in certain cases can result in improved performance. It is not valid to specify this flag without also specifying <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Transacted"/>, and this flag may only be used in a root open. For more information about <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoScratch"/> mode, see the Remarks section of the web page referenced in the description of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoSnapshot">
            <summary>
            This flag is used when opening a storage object with <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Transactioning.Transacted"/> and without <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareExclusive"/> or <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Sharing.ShareDenyWrite"/>. In this case, specifying <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoSnapshot"/> prevents the system-provided implementation from creating a snapshot copy of the file. Instead, changes to the file are written to the end of the file. Unused space is not reclaimed unless consolidation is performed during the commit, and there is only one current writer on the file. When the file is opened in no snapshot mode, another open operation cannot be performed without specifying <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoSnapshot"/>. This flag may only be used in a root open operation. For more information about <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.TransactioningPerformance.NoSnapshot"/> mode, see the Remarks section of the web page referenced in the description of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.DirectSWMRAndSimple.Simple">
            <summary>
            Provides a faster implementation of a compound file in a limited, but frequently used, case. For more information, see the Remarks section of the web page referenced in the description of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.DirectSWMRAndSimple.DirectSWMR">
            <summary>
            Supports direct mode for single-writer, multireader file operations. For more information, see the Remarks section of the web page referenced in the description of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.DeleteOnRelease">
            <summary>
            Indicates that the underlying file is to be automatically destroyed when the root storage object is released. This feature is most useful for creating temporary files. This flag can only be used when creating a root object, such as with StgCreateStorageEx. It is not valid when opening a root object, such as with StgOpenStorageEx, or when creating or opening a subelement, such as with IStorage::CreateStream. It is also not valid to use this flag and the <see cref="F:Microsoft.WindowsAPICodePack.Win32Native.Storage.STGM.Creation.Convert"/> flag simultaneously.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes">
            <summary>
            The <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes"/> structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable. This structure provides security settings for objects created by various functions, such as CreateFile, CreatePipe, CreateProcess, RegCreateKeyEx, or RegSaveKeyEx.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes.nLength">
            <summary>
            The size, in bytes, of this structure. Set this value to the size of the <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes"/> structure.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes.lpSecurityDescriptor">
            <summary>
            A <see cref="T:Microsoft.WindowsAPICodePack.Win32Native.SecurityDescriptor"/> class that controls access to the object. If the value of this member is <see langword="null"/>, the object is assigned the default security descriptor associated with the access token of the calling process. This is not the same as granting access to everyone by assigning a <see langword="null"/> discretionary access control list (DACL). By default, the default DACL in the access token of a process allows access only to the user represented by the access token.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.SecurityAttributes.bInheritHandle">
            <summary>
            A <see cref="T:System.Boolean"/> value that specifies whether the returned handle is inherited when a new process is created. If this member is <see langword="true"/>, the new process inherits the handle.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Size">
            <summary>
            A Wrapper for a SIZE struct
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Size.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Size.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.NativeTaskDialogSettings">
            <summary>
             Encapsulates additional configuration needed by NativeTaskDialog
             that it can't get from the TASKDIALOGCONFIG struct.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialog">
            <summary>
            public class containing most native interop declarations used
            throughout the library.
            Functions that are not performance intensive belong in this class.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialog.IconUnion.MainIcon">
            <summary>
            Gets the handle to the Icon
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialogProgressBarState">
            <summary>
            Sets the state of a task dialog progress bar.
            </summary>        
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialogProgressBarState.None">
            <summary>
            Uninitialized state, this should never occur.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialogProgressBarState.Normal">
            <summary>
            Normal state.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialogProgressBarState.Error">
            <summary>
            An error occurred.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialogProgressBarState.Paused">
            <summary>
            The progress is paused.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Dialogs.TaskDialogProgressBarState.Marquee">
            <summary>
            Displays marquee (indeterminate) style progress
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.TimeZone.SystemTime">
            <summary>
            The SystemTime structure represents a date and time using individual members for 
            the month, day, year, weekday, hour, minute, second, and millisecond.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Win32Native.TimeZone.SystemTime.DateTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> representation of this object.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Controls.ExplorerBrowserNativeMethods">
            <summary>
            public class that contains interop declarations for 
            functions that are not benign and are performance critical. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Taskbar.ThumbButton.Clicked">
            <summary>
            WPARAM value for a THUMBBUTTON being clicked.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Win32Native.Taskbar.ThumbnailAlphaType">
            <summary>
            Thumbnail Alpha Types
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Taskbar.ThumbnailAlphaType.Unknown">
            <summary>
            Let the system decide.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Taskbar.ThumbnailAlphaType.NoAlphaChannel">
            <summary>
            No transparency
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Win32Native.Taskbar.ThumbnailAlphaType.HasAlphaChannel">
            <summary>
            Has transparency
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonality">
            <summary>
            Specifies the supported power personalities.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonality.Unknown">
            <summary>
            The power personality Guid does not match a known value.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonality.HighPerformance">
            <summary>
            Power settings designed to deliver maximum performance
            at the expense of power consumption savings.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonality.PowerSaver">
            <summary>
            Power settings designed consume minimum power
            at the expense of system performance and responsiveness.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonality.Automatic">
            <summary>
            Power settings designed to balance performance 
            and power consumption.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey">
            <summary>
            Defines a unique key for a Shell Property
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.FormatId">
            <summary>
            A unique GUID for the property
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.PropertyId">
            <summary>
             Property identifier (PID)
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.#ctor(System.Guid,System.UInt32)">
            <summary>
            PropertyKey Constructor
            </summary>
            <param name="formatId">A unique GUID for the property</param>
            <param name="propertyId">Property identifier (PID)</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.#ctor(System.String,System.UInt32)">
            <summary>
            PropertyKey Constructor
            </summary>
            <param name="formatId">A string represenstion of a GUID for the property</param>
            <param name="propertyId">Property identifier (PID)</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.Equals(Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey)">
            <summary>
            Returns whether this object is equal to another. This is vital for performance of value types.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>Equality result.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.GetHashCode">
            <summary>
            Returns the hash code of the object. This is vital for performance of value types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.Equals(System.Object)">
            <summary>
            Returns whether this object is equal to another. This is vital for performance of value types.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>Equality result.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.op_Equality(Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey,Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey)">
            <summary>
            Implements the == (equality) operator.
            </summary>
            <param name="propKey1">First property key to compare.</param>
            <param name="propKey2">Second property key to compare.</param>
            <returns>true if object a equals object b. false otherwise.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.op_Inequality(Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey,Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey)">
            <summary>
            Implements the != (inequality) operator.
            </summary>
            <param name="propKey1">First property key to compare</param>
            <param name="propKey2">Second property key to compare.</param>
            <returns>true if object a does not equal object b. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey.ToString">
            <summary>
            Override ToString() to provide a user friendly string representation
            </summary>
            <returns>String representing the property key</returns>        
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.WindowMessage.XBUTTONDOWN">
            <summary>
            Obsolete -- Please use <see cref="F:Microsoft.WindowsAPICodePack.WindowMessage.XButtonDown"/> instead.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.WindowMessage.XBUTTONUP">
            <summary>
            Obsolete -- Please use <see cref="F:Microsoft.WindowsAPICodePack.WindowMessage.XButtonUp"/> instead.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.WindowMessage.XBUTTONDBLCLK">
            <summary>
            Obsolete -- Please use <see cref="F:Microsoft.WindowsAPICodePack.WindowMessage.XButtonDoubleClick"/> instead.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException">
            <summary>
            This exception is thrown by the managed wrappers of ELS when the underlying
            unmanaged implementation returns an HResult which is not S_OK (0).
            This exception is also thrown when the managed wrapper detects an exceptional
            condition which causes it to fail. Please note that other .NET exceptions are also
            possible to be thrown from the ELS managed wrappers.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException">LinguisticException</see> class
            with the last Win32 error that occurred.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException">LinguisticException</see> class
             with the specified context and the serialization information.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> associated with this exception.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext">StreamingContext</see> that represents the context of this exception.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException">LinguisticException</see> 
            class with the specified detailed description.
            </summary>
            <param name="message">A detailed description of the error.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException">LinguisticException</see> class
            with the specified detailed description and the specified exception.
            </summary>
            <param name="message">A detailed description of the error.</param>
            <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.LinguisticException.ResultState">
            <summary>
            Gets the MappingResultState describing the error condition for this exception.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">
            <summary>
            This class serves as the result status of asynchronous calls to ELS and
            as the result status of linguistic exceptions.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.ErrorMessage">
            <summary>
            Gets a human-readable description of the HResult error code,
            as constructed by <see cref="T:System.ComponentModel.Win32Exception">Win32Exception</see>.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.HResult">
            <summary>
            Gets the HResult error code associated with this structure.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.GetHashCode">
            <summary>
            Uses the HResult param as the object hashcode.
            </summary>
            <returns>An integer hashcode</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.Equals(System.Object)">
            <summary>
            Compares an Object for value equality.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if obj is equal to this instance, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.Equals(Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState)">
            <summary>
            Compares a <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> obj for value equality.
            </summary>
            <param name="obj"><see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> to compare.</param>
            <returns>True if obj is equal to this instance, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.op_Equality(Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState,Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState)">
            <summary>
            Compares two <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> objs for value equality.
            </summary>
            <param name="one">First <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> to compare.</param>
            <param name="two">Second <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> to compare.</param>
            <returns>True if the two <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultStates</see> are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState.op_Inequality(Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState,Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState)">
            <summary>
            Compares two <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> objs against value equality.
            </summary>
            <param name="one">First <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> to compare.</param>
            <param name="two">Second <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultState</see> to compare.</param>
            <returns>True if the two <see cref="T:Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.MappingResultState">MappingResultStates</see> are not equal, false otherwise.</returns>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.None">
            <summary>
            No value type
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.String">
            <summary>
            Unicode nul terminated string
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.ExpandString">
            <summary>
            Unicode nul terminated string (with environment variable references)
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.Binary">
            <summary>
            Free form binary
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.DWord">
            <summary>
            32-bit number
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.DWordLittleEndian">
            <summary>
            32-bit number (same as <see cref="F:Microsoft.WindowsAPICodePack.BlobValueKind.DWord"/>)
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.DWordBigEndian">
            <summary>
            32-bit number
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.Link">
            <summary>
            Symbolic Link (unicode)
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.MultiString">
            <summary>
            Multiple Unicode strings
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.ResourceList">
            <summary>
            Resource list in the resource map
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.FullResourceDescriptor">
            <summary>
            Resource list in the hardware description
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.QWord">
            <summary>
            64-bit number
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.BlobValueKind.QWordLittleEndian">
            <summary>
            64-bit number (same as <see cref="F:Microsoft.WindowsAPICodePack.BlobValueKind.QWord"/>)
            </summary>
        </member>
    </members>
</doc>
